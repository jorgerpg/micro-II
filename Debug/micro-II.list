
micro-II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800327c  0800327c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800327c  0800327c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800327c  0800327c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000000c  08003294  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08003294  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee0e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298e  00000000  00000000  0002ee85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab3  00000000  00000000  00032608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036f5  00000000  00000000  000330bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012605  00000000  00000000  000367b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009505d  00000000  00000000  00048db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003124  00000000  00000000  000dde14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e0f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003234 	.word	0x08003234

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003234 	.word	0x08003234

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN4BaseC1Ev>:

#include "stm32f0xx_hal.h"

class Base {
public:
    Base() : intervalMs_(0), elapsedTime_(0)
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
    {
        startTime_ = HAL_GetTick(); // Using getTick() to get the initial time
 8000234:	f000 fe04 	bl	8000e40 <HAL_GetTick>
 8000238:	0002      	movs	r2, r0
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
    }
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0018      	movs	r0, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}

08000248 <_ZN4Base5startEm>:
    void start(uint32_t interval) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
    	intervalMs_ = interval;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	601a      	str	r2, [r3, #0]
    }
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}

08000260 <main>:
Base BASE05;

uint32_t adcteste;

int main()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	mainInit();
 8000264:	f000 f8e8 	bl	8000438 <mainInit>
	app_init();
 8000268:	f000 f804 	bl	8000274 <_Z8app_initv>

	while(true)
	{
		app_loop();
 800026c:	f000 f8a6 	bl	80003bc <_Z8app_loopv>
 8000270:	e7fc      	b.n	800026c <main+0xc>
	...

08000274 <_Z8app_initv>:
	}
}

void app_init()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	  HAL_ADC_Start_DMA(&hadc, &adcteste, 1);
 8000278:	4911      	ldr	r1, [pc, #68]	; (80002c0 <_Z8app_initv+0x4c>)
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <_Z8app_initv+0x50>)
 800027c:	2201      	movs	r2, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f000 ff28 	bl	80010d4 <HAL_ADC_Start_DMA>
	  (void)BASE1.start(1000);
 8000284:	23fa      	movs	r3, #250	; 0xfa
 8000286:	009a      	lsls	r2, r3, #2
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <_Z8app_initv+0x54>)
 800028a:	0011      	movs	r1, r2
 800028c:	0018      	movs	r0, r3
 800028e:	f7ff ffdb 	bl	8000248 <_ZN4Base5startEm>
	  (void)BASE2.start(2000);
 8000292:	23fa      	movs	r3, #250	; 0xfa
 8000294:	00da      	lsls	r2, r3, #3
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <_Z8app_initv+0x58>)
 8000298:	0011      	movs	r1, r2
 800029a:	0018      	movs	r0, r3
 800029c:	f7ff ffd4 	bl	8000248 <_ZN4Base5startEm>
	  (void)BASE5.start(5000);
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <_Z8app_initv+0x5c>)
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <_Z8app_initv+0x60>)
 80002a4:	0011      	movs	r1, r2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f7ff ffce 	bl	8000248 <_ZN4Base5startEm>
	  (void)BASE05.start(500);
 80002ac:	23fa      	movs	r3, #250	; 0xfa
 80002ae:	005a      	lsls	r2, r3, #1
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <_Z8app_initv+0x64>)
 80002b2:	0011      	movs	r1, r2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffc7 	bl	8000248 <_ZN4Base5startEm>
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000058 	.word	0x20000058
 80002c4:	2000005c 	.word	0x2000005c
 80002c8:	20000028 	.word	0x20000028
 80002cc:	20000034 	.word	0x20000034
 80002d0:	00001388 	.word	0x00001388
 80002d4:	20000040 	.word	0x20000040
 80002d8:	2000004c 	.word	0x2000004c

080002dc <_Z9adc_testev>:

void adc_teste()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	  if(adcteste > 1000)
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <_Z9adc_testev+0xd0>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	23fa      	movs	r3, #250	; 0xfa
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d905      	bls.n	80002f8 <_Z9adc_testev+0x1c>
	  	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80002ec:	4b30      	ldr	r3, [pc, #192]	; (80003b0 <_Z9adc_testev+0xd4>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 fd8c 	bl	8001e10 <HAL_GPIO_WritePin>
	  if(adcteste > 2000)
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <_Z9adc_testev+0xd0>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	23fa      	movs	r3, #250	; 0xfa
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	429a      	cmp	r2, r3
 8000302:	d906      	bls.n	8000312 <_Z9adc_testev+0x36>
	  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	4829      	ldr	r0, [pc, #164]	; (80003b0 <_Z9adc_testev+0xd4>)
 800030a:	2201      	movs	r2, #1
 800030c:	0019      	movs	r1, r3
 800030e:	f001 fd7f 	bl	8001e10 <HAL_GPIO_WritePin>
	  if(adcteste > 3000)
 8000312:	4b26      	ldr	r3, [pc, #152]	; (80003ac <_Z9adc_testev+0xd0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <_Z9adc_testev+0xd8>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d906      	bls.n	800032a <_Z9adc_testev+0x4e>
	  	  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	4823      	ldr	r0, [pc, #140]	; (80003b0 <_Z9adc_testev+0xd4>)
 8000322:	2201      	movs	r2, #1
 8000324:	0019      	movs	r1, r3
 8000326:	f001 fd73 	bl	8001e10 <HAL_GPIO_WritePin>
	  if(adcteste > 4000)
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <_Z9adc_testev+0xd0>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	23fa      	movs	r3, #250	; 0xfa
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	429a      	cmp	r2, r3
 8000334:	d905      	bls.n	8000342 <_Z9adc_testev+0x66>
	  	  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <_Z9adc_testev+0xd4>)
 8000338:	2201      	movs	r2, #1
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fd67 	bl	8001e10 <HAL_GPIO_WritePin>

	  if(adcteste < 1000)
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <_Z9adc_testev+0xd0>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	23fa      	movs	r3, #250	; 0xfa
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	429a      	cmp	r2, r3
 800034c:	d205      	bcs.n	800035a <_Z9adc_testev+0x7e>
	  	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <_Z9adc_testev+0xd4>)
 8000350:	2200      	movs	r2, #0
 8000352:	2140      	movs	r1, #64	; 0x40
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fd5b 	bl	8001e10 <HAL_GPIO_WritePin>
	  if(adcteste < 2000)
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <_Z9adc_testev+0xd0>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	23fa      	movs	r3, #250	; 0xfa
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	429a      	cmp	r2, r3
 8000364:	d206      	bcs.n	8000374 <_Z9adc_testev+0x98>
	  	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000366:	2380      	movs	r3, #128	; 0x80
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	4811      	ldr	r0, [pc, #68]	; (80003b0 <_Z9adc_testev+0xd4>)
 800036c:	2200      	movs	r2, #0
 800036e:	0019      	movs	r1, r3
 8000370:	f001 fd4e 	bl	8001e10 <HAL_GPIO_WritePin>
	  if(adcteste < 3000)
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <_Z9adc_testev+0xd0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <_Z9adc_testev+0xdc>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d806      	bhi.n	800038c <_Z9adc_testev+0xb0>
	  	  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <_Z9adc_testev+0xd4>)
 8000384:	2200      	movs	r2, #0
 8000386:	0019      	movs	r1, r3
 8000388:	f001 fd42 	bl	8001e10 <HAL_GPIO_WritePin>
	  if(adcteste < 4000)
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <_Z9adc_testev+0xd0>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	23fa      	movs	r3, #250	; 0xfa
 8000392:	011b      	lsls	r3, r3, #4
 8000394:	429a      	cmp	r2, r3
 8000396:	d205      	bcs.n	80003a4 <_Z9adc_testev+0xc8>
	  	  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <_Z9adc_testev+0xd4>)
 800039a:	2200      	movs	r2, #0
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 fd36 	bl	8001e10 <HAL_GPIO_WritePin>
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	20000058 	.word	0x20000058
 80003b0:	48000800 	.word	0x48000800
 80003b4:	00000bb8 	.word	0x00000bb8
 80003b8:	00000bb7 	.word	0x00000bb7

080003bc <_Z8app_loopv>:
	  (void)BASE05.restart();
    }
}

void app_loop()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	adc_teste();
 80003c0:	f7ff ff8c 	bl	80002dc <_Z9adc_testev>
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <_Z41__static_initialization_and_destruction_0ii>:
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d113      	bne.n	8000404 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d10f      	bne.n	8000404 <_Z41__static_initialization_and_destruction_0ii+0x38>
Base BASE1;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f7ff ff1a 	bl	8000220 <_ZN4BaseC1Ev>
Base BASE2;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff ff16 	bl	8000220 <_ZN4BaseC1Ev>
Base BASE5;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f7ff ff12 	bl	8000220 <_ZN4BaseC1Ev>
Base BASE05;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff0e 	bl	8000220 <_ZN4BaseC1Ev>
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	0000ffff 	.word	0x0000ffff
 8000410:	20000028 	.word	0x20000028
 8000414:	20000034 	.word	0x20000034
 8000418:	20000040 	.word	0x20000040
 800041c:	2000004c 	.word	0x2000004c

08000420 <_GLOBAL__sub_I_BASE1>:
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <_GLOBAL__sub_I_BASE1+0x14>)
 8000426:	0019      	movs	r1, r3
 8000428:	2001      	movs	r0, #1
 800042a:	f7ff ffcf 	bl	80003cc <_Z41__static_initialization_and_destruction_0ii>
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	0000ffff 	.word	0x0000ffff

08000438 <mainInit>:
int main(void)
{
  /* USER CODE BEGIN 1 */
#endif
void mainInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fca6 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f811 	bl	8000466 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f000 f9dc 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 8000448:	f000 f9bc 	bl	80007c4 <MX_DMA_Init>
  MX_I2C2_Init();
 800044c:	f000 f8d2 	bl	80005f4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000450:	f000 f910 	bl	8000674 <MX_SPI2_Init>
  MX_TSC_Init();
 8000454:	f000 f94c 	bl	80006f0 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000458:	f000 f98e 	bl	8000778 <MX_USB_PCD_Init>
  MX_ADC_Init();
 800045c:	f000 f870 	bl	8000540 <MX_ADC_Init>

    /* USER CODE BEGIN 3 */
  }
#endif
  /* USER CODE END 3 */
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000466:	b590      	push	{r4, r7, lr}
 8000468:	b099      	sub	sp, #100	; 0x64
 800046a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046c:	242c      	movs	r4, #44	; 0x2c
 800046e:	193b      	adds	r3, r7, r4
 8000470:	0018      	movs	r0, r3
 8000472:	2334      	movs	r3, #52	; 0x34
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f002 feaf 	bl	80031da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	231c      	movs	r3, #28
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	0018      	movs	r0, r3
 8000482:	2310      	movs	r3, #16
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f002 fea7 	bl	80031da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800048c:	003b      	movs	r3, r7
 800048e:	0018      	movs	r0, r3
 8000490:	231c      	movs	r3, #28
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f002 fea0 	bl	80031da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800049a:	0021      	movs	r1, r4
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2232      	movs	r2, #50	; 0x32
 80004a0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2201      	movs	r2, #1
 80004a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2201      	movs	r2, #1
 80004ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2201      	movs	r2, #1
 80004b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2210      	movs	r2, #16
 80004b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2210      	movs	r2, #16
 80004be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0212      	lsls	r2, r2, #8
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	0352      	lsls	r2, r2, #13
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 ff0c 	bl	80022fc <HAL_RCC_OscConfig>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x86>
  {
    Error_Handler();
 80004e8:	f000 fa06 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	211c      	movs	r1, #28
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2207      	movs	r2, #7
 80004f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2101      	movs	r1, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f002 fa7c 	bl	8002a08 <HAL_RCC_ClockConfig>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000514:	f000 f9f0 	bl	80008f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000518:	003b      	movs	r3, r7
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0292      	lsls	r2, r2, #10
 800051e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000520:	003b      	movs	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fbb9 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000532:	f000 f9e1 	bl	80008f8 <Error_Handler>
  }
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b019      	add	sp, #100	; 0x64
 800053c:	bd90      	pop	{r4, r7, pc}
	...

08000540 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	0018      	movs	r0, r3
 800054a:	230c      	movs	r3, #12
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f002 fe43 	bl	80031da <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <MX_ADC_Init+0xac>)
 8000556:	4a26      	ldr	r2, [pc, #152]	; (80005f0 <MX_ADC_Init+0xb0>)
 8000558:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_ADC_Init+0xac>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <MX_ADC_Init+0xac>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_ADC_Init+0xac>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_ADC_Init+0xac>)
 800056e:	2201      	movs	r2, #1
 8000570:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_ADC_Init+0xac>)
 8000574:	2204      	movs	r2, #4
 8000576:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <MX_ADC_Init+0xac>)
 800057a:	2200      	movs	r2, #0
 800057c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_ADC_Init+0xac>)
 8000580:	2200      	movs	r2, #0
 8000582:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <MX_ADC_Init+0xac>)
 8000586:	2201      	movs	r2, #1
 8000588:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_ADC_Init+0xac>)
 800058c:	2200      	movs	r2, #0
 800058e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <MX_ADC_Init+0xac>)
 8000592:	22c2      	movs	r2, #194	; 0xc2
 8000594:	32ff      	adds	r2, #255	; 0xff
 8000596:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_ADC_Init+0xac>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_ADC_Init+0xac>)
 80005a0:	2224      	movs	r2, #36	; 0x24
 80005a2:	2101      	movs	r1, #1
 80005a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_ADC_Init+0xac>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_ADC_Init+0xac>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fc50 	bl	8000e54 <HAL_ADC_Init>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80005b8:	f000 f99e 	bl	80008f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	0152      	lsls	r2, r2, #5
 80005c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2207      	movs	r2, #7
 80005ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_ADC_Init+0xac>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fe16 	bl	8001208 <HAL_ADC_ConfigChannel>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80005e0:	f000 f98a 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b004      	add	sp, #16
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000005c 	.word	0x2000005c
 80005f0:	40012400 	.word	0x40012400

080005f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_I2C2_Init+0x74>)
 80005fa:	4a1c      	ldr	r2, [pc, #112]	; (800066c <MX_I2C2_Init+0x78>)
 80005fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_I2C2_Init+0x74>)
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <MX_I2C2_Init+0x7c>)
 8000602:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_I2C2_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_I2C2_Init+0x74>)
 800060c:	2201      	movs	r2, #1
 800060e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_I2C2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_I2C2_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C2_Init+0x74>)
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fc0b 	bl	8001e4c <HAL_I2C_Init>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800063a:	f000 f95d 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C2_Init+0x74>)
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fc98 	bl	8001f78 <HAL_I2CEx_ConfigAnalogFilter>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800064c:	f000 f954 	bl	80008f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <MX_I2C2_Init+0x74>)
 8000652:	2100      	movs	r1, #0
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fcdb 	bl	8002010 <HAL_I2CEx_ConfigDigitalFilter>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800065e:	f000 f94b 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000e0 	.word	0x200000e0
 800066c:	40005800 	.word	0x40005800
 8000670:	20303e5d 	.word	0x20303e5d

08000674 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_SPI2_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_SPI2_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000680:	2282      	movs	r2, #130	; 0x82
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI2_Init+0x74>)
 800068e:	22c0      	movs	r2, #192	; 0xc0
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_SPI2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006aa:	2208      	movs	r2, #8
 80006ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006c2:	2207      	movs	r2, #7
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006ce:	2208      	movs	r2, #8
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_SPI2_Init+0x74>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fbe1 	bl	8002e9c <HAL_SPI_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f90b 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000134 	.word	0x20000134
 80006ec:	40003800 	.word	0x40003800

080006f0 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_TSC_Init+0x80>)
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_TSC_Init+0x84>)
 80006f8:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_TSC_Init+0x80>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0552      	lsls	r2, r2, #21
 8000700:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_TSC_Init+0x80>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0452      	lsls	r2, r2, #17
 8000708:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_TSC_Init+0x80>)
 800070c:	2200      	movs	r2, #0
 800070e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_TSC_Init+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_TSC_Init+0x80>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_TSC_Init+0x80>)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	0192      	lsls	r2, r2, #6
 8000722:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_TSC_Init+0x80>)
 8000726:	22a0      	movs	r2, #160	; 0xa0
 8000728:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_TSC_Init+0x80>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_TSC_Init+0x80>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_TSC_Init+0x80>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_TSC_Init+0x80>)
 800073e:	222c      	movs	r2, #44	; 0x2c
 8000740:	2100      	movs	r1, #0
 8000742:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_TSC_Init+0x80>)
 8000746:	2291      	movs	r2, #145	; 0x91
 8000748:	0092      	lsls	r2, r2, #2
 800074a:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_TSC_Init+0x80>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_TSC_Init+0x80>)
 8000754:	2291      	movs	r2, #145	; 0x91
 8000756:	00d2      	lsls	r2, r2, #3
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MX_TSC_Init+0x80>)
 800075c:	0018      	movs	r0, r3
 800075e:	f002 fc55 	bl	800300c <HAL_TSC_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000766:	f000 f8c7 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000198 	.word	0x20000198
 8000774:	40024000 	.word	0x40024000

08000778 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USB_PCD_Init+0x44>)
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <MX_USB_PCD_Init+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USB_PCD_Init+0x44>)
 8000784:	2208      	movs	r2, #8
 8000786:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USB_PCD_Init+0x44>)
 800078a:	2202      	movs	r2, #2
 800078c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USB_PCD_Init+0x44>)
 8000790:	2202      	movs	r2, #2
 8000792:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USB_PCD_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USB_PCD_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USB_PCD_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_USB_PCD_Init+0x44>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fc7d 	bl	80020a8 <HAL_PCD_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80007b2:	f000 f8a1 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200001dc 	.word	0x200001dc
 80007c0:	40005c00 	.word	0x40005c00

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_DMA_Init+0x38>)
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_DMA_Init+0x38>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_DMA_Init+0x38>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	2201      	movs	r2, #1
 80007dc:	4013      	ands	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2009      	movs	r0, #9
 80007e8:	f000 ffd0 	bl	800178c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ec:	2009      	movs	r0, #9
 80007ee:	f000 ffe2 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	240c      	movs	r4, #12
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2314      	movs	r3, #20
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 fce2 	bl	80031da <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_GPIO_Init+0xec>)
 8000818:	695a      	ldr	r2, [r3, #20]
 800081a:	4b34      	ldr	r3, [pc, #208]	; (80008ec <MX_GPIO_Init+0xec>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0309      	lsls	r1, r1, #12
 8000820:	430a      	orrs	r2, r1
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <MX_GPIO_Init+0xec>)
 8000826:	695a      	ldr	r2, [r3, #20]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	031b      	lsls	r3, r3, #12
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <MX_GPIO_Init+0xec>)
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xec>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0289      	lsls	r1, r1, #10
 800083c:	430a      	orrs	r2, r1
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xec>)
 8000842:	695a      	ldr	r2, [r3, #20]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	029b      	lsls	r3, r3, #10
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_GPIO_Init+0xec>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0xec>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	02c9      	lsls	r1, r1, #11
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_GPIO_Init+0xec>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	02db      	lsls	r3, r3, #11
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 800086a:	4921      	ldr	r1, [pc, #132]	; (80008f0 <MX_GPIO_Init+0xf0>)
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_GPIO_Init+0xf4>)
 800086e:	2200      	movs	r2, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f001 facd 	bl	8001e10 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000876:	193b      	adds	r3, r7, r4
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <MX_GPIO_Init+0xf0>)
 800087a:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088e:	193b      	adds	r3, r7, r4
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xf4>)
 8000892:	0019      	movs	r1, r3
 8000894:	0010      	movs	r0, r2
 8000896:	f001 f943 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2206      	movs	r2, #6
 80008a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2290      	movs	r2, #144	; 0x90
 80008a6:	0352      	lsls	r2, r2, #13
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	000c      	movs	r4, r1
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <MX_GPIO_Init+0xf4>)
 80008b6:	0019      	movs	r1, r3
 80008b8:	0010      	movs	r0, r2
 80008ba:	f001 f931 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2290      	movs	r2, #144	; 0x90
 80008ca:	0352      	lsls	r2, r2, #13
 80008cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	187a      	adds	r2, r7, r1
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 f91f 	bl	8001b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b009      	add	sp, #36	; 0x24
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000
 80008f0:	000003e1 	.word	0x000003e1
 80008f4:	48000800 	.word	0x48000800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	619a      	str	r2, [r3, #24]
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	69da      	ldr	r2, [r3, #28]
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0549      	lsls	r1, r1, #21
 800092c:	430a      	orrs	r2, r1
 800092e:	61da      	str	r2, [r3, #28]
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_MspInit+0x44>)
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	055b      	lsls	r3, r3, #21
 8000938:	4013      	ands	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08b      	sub	sp, #44	; 0x2c
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	2414      	movs	r4, #20
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 fc3b 	bl	80031da <memset>
  if(hadc->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <HAL_ADC_MspInit+0xd4>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d153      	bne.n	8000a16 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_ADC_MspInit+0xd8>)
 8000970:	699a      	ldr	r2, [r3, #24]
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <HAL_ADC_MspInit+0xd8>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0089      	lsls	r1, r1, #2
 8000978:	430a      	orrs	r2, r1
 800097a:	619a      	str	r2, [r3, #24]
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <HAL_ADC_MspInit+0xd8>)
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <HAL_ADC_MspInit+0xd8>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <HAL_ADC_MspInit+0xd8>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <HAL_ADC_MspInit+0xd8>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2202      	movs	r2, #2
 80009aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2203      	movs	r2, #3
 80009b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	193a      	adds	r2, r7, r4
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 f8ad 	bl	8001b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_ADC_MspInit+0xe0>)
 80009ca:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	00d2      	lsls	r2, r2, #3
 80009ec:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009f0:	2220      	movs	r2, #32
 80009f2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fef7 	bl	80017f0 <HAL_DMA_Init>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000a06:	f7ff ff77 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 8000a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_ADC_MspInit+0xdc>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b00b      	add	sp, #44	; 0x2c
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40012400 	.word	0x40012400
 8000a24:	40021000 	.word	0x40021000
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	40020008 	.word	0x40020008

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08b      	sub	sp, #44	; 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2414      	movs	r4, #20
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 fbc9 	bl	80031da <memset>
  if(hi2c->Instance==I2C2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <HAL_I2C_MspInit+0x90>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d132      	bne.n	8000ab8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	02c9      	lsls	r1, r1, #11
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	02db      	lsls	r3, r3, #11
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	22c0      	movs	r2, #192	; 0xc0
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	0021      	movs	r1, r4
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2212      	movs	r2, #18
 8000a7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2201      	movs	r2, #1
 8000a82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2203      	movs	r2, #3
 8000a88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000a94:	0019      	movs	r1, r3
 8000a96:	0010      	movs	r0, r2
 8000a98:	f001 f842 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a9e:	69da      	ldr	r2, [r3, #28]
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	03c9      	lsls	r1, r1, #15
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	61da      	str	r2, [r3, #28]
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000aac:	69da      	ldr	r2, [r3, #28]
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b00b      	add	sp, #44	; 0x2c
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400

08000acc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08b      	sub	sp, #44	; 0x2c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	2414      	movs	r4, #20
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2314      	movs	r3, #20
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f002 fb7b 	bl	80031da <memset>
  if(hspi->Instance==SPI2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <HAL_SPI_MspInit+0x90>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d132      	bne.n	8000b54 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_SPI_MspInit+0x94>)
 8000af0:	69da      	ldr	r2, [r3, #28]
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_SPI_MspInit+0x94>)
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	01c9      	lsls	r1, r1, #7
 8000af8:	430a      	orrs	r2, r1
 8000afa:	61da      	str	r2, [r3, #28]
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_SPI_MspInit+0x94>)
 8000afe:	69da      	ldr	r2, [r3, #28]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	01db      	lsls	r3, r3, #7
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_SPI_MspInit+0x94>)
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_SPI_MspInit+0x94>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	02c9      	lsls	r1, r1, #11
 8000b14:	430a      	orrs	r2, r1
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_SPI_MspInit+0x94>)
 8000b1a:	695a      	ldr	r2, [r3, #20]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	02db      	lsls	r3, r3, #11
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	22e0      	movs	r2, #224	; 0xe0
 8000b2a:	0212      	lsls	r2, r2, #8
 8000b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	0021      	movs	r1, r4
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2202      	movs	r2, #2
 8000b34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_SPI_MspInit+0x98>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f000 ffe6 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b00b      	add	sp, #44	; 0x2c
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	40003800 	.word	0x40003800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400

08000b68 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08b      	sub	sp, #44	; 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	2414      	movs	r4, #20
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	0018      	movs	r0, r3
 8000b76:	2314      	movs	r3, #20
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f002 fb2d 	bl	80031da <memset>
  if(htsc->Instance==TSC)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a44      	ldr	r2, [pc, #272]	; (8000c98 <HAL_TSC_MspInit+0x130>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d000      	beq.n	8000b8c <HAL_TSC_MspInit+0x24>
 8000b8a:	e080      	b.n	8000c8e <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000b8c:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	0449      	lsls	r1, r1, #17
 8000b96:	430a      	orrs	r2, r1
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	045b      	lsls	r3, r3, #17
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	0289      	lsls	r1, r1, #10
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	029b      	lsls	r3, r3, #10
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	02c9      	lsls	r1, r1, #11
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <HAL_TSC_MspInit+0x134>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	02db      	lsls	r3, r3, #11
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2244      	movs	r2, #68	; 0x44
 8000be4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2202      	movs	r2, #2
 8000bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	193a      	adds	r2, r7, r4
 8000c00:	2390      	movs	r3, #144	; 0x90
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 ff8a 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2288      	movs	r2, #136	; 0x88
 8000c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2212      	movs	r2, #18
 8000c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2203      	movs	r2, #3
 8000c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	193a      	adds	r2, r7, r4
 8000c2c:	2390      	movs	r3, #144	; 0x90
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 ff74 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2202      	movs	r2, #2
 8000c42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2203      	movs	r2, #3
 8000c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <HAL_TSC_MspInit+0x138>)
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	f000 ff5f 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c62:	0021      	movs	r1, r4
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2202      	movs	r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2212      	movs	r2, #18
 8000c6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_TSC_MspInit+0x138>)
 8000c86:	0019      	movs	r1, r3
 8000c88:	0010      	movs	r0, r2
 8000c8a:	f000 ff49 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b00b      	add	sp, #44	; 0x2c
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40024000 	.word	0x40024000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_PCD_MspInit+0x38>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_PCD_MspInit+0x3c>)
 8000cb8:	69da      	ldr	r2, [r3, #28]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_PCD_MspInit+0x3c>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	0409      	lsls	r1, r1, #16
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	61da      	str	r2, [r3, #28]
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_PCD_MspInit+0x3c>)
 8000cc6:	69da      	ldr	r2, [r3, #28]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	041b      	lsls	r3, r3, #16
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	40005c00 	.word	0x40005c00
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f888 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <DMA1_Channel1_IRQHandler+0x14>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fe16 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f7ff fff6 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d66:	f002 fa41 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff fa79 	bl	8000260 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d7c:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d84:	200004d4 	.word	0x200004d4

08000d88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_COMP_IRQHandler>
	...

08000d8c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_Init+0x24>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_Init+0x24>)
 8000d96:	2110      	movs	r1, #16
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 f809 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da2:	f7ff fdaf 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40022000 	.word	0x40022000

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_InitTick+0x5c>)
 8000dbe:	681c      	ldr	r4, [r3, #0]
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_InitTick+0x60>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	23fa      	movs	r3, #250	; 0xfa
 8000dc8:	0098      	lsls	r0, r3, #2
 8000dca:	f7ff f99d 	bl	8000108 <__udivsi3>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f7ff f998 	bl	8000108 <__udivsi3>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fcfb 	bl	80017d6 <HAL_SYSTICK_Config>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e00f      	b.n	8000e08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d80b      	bhi.n	8000e06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2301      	movs	r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fcc8 	bl	800178c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_InitTick+0x64>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b003      	add	sp, #12
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x20>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	18d2      	adds	r2, r2, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_IncTick+0x20>)
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200004d0 	.word	0x200004d0

08000e40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	200004d0 	.word	0x200004d0

08000e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e125      	b.n	80010be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10a      	bne.n	8000e90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2234      	movs	r2, #52	; 0x34
 8000e84:	2100      	movs	r1, #0
 8000e86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fd5e 	bl	800094c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	2210      	movs	r2, #16
 8000e96:	4013      	ands	r3, r2
 8000e98:	d000      	beq.n	8000e9c <HAL_ADC_Init+0x48>
 8000e9a:	e103      	b.n	80010a4 <HAL_ADC_Init+0x250>
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d000      	beq.n	8000ea8 <HAL_ADC_Init+0x54>
 8000ea6:	e0fd      	b.n	80010a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000eb2:	d000      	beq.n	8000eb6 <HAL_ADC_Init+0x62>
 8000eb4:	e0f6      	b.n	80010a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eba:	4a83      	ldr	r2, [pc, #524]	; (80010c8 <HAL_ADC_Init+0x274>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2203      	movs	r2, #3
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d112      	bne.n	8000efa <HAL_ADC_Init+0xa6>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d009      	beq.n	8000ef6 <HAL_ADC_Init+0xa2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	401a      	ands	r2, r3
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0xa6>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_ADC_Init+0xa8>
 8000efa:	2300      	movs	r3, #0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d116      	bne.n	8000f2e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2218      	movs	r2, #24
 8000f08:	4393      	bics	r3, r2
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	0899      	lsrs	r1, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4964      	ldr	r1, [pc, #400]	; (80010cc <HAL_ADC_Init+0x278>)
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7e1b      	ldrb	r3, [r3, #24]
 8000f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e5b      	ldrb	r3, [r3, #25]
 8000f48:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7e9b      	ldrb	r3, [r3, #26]
 8000f50:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f52:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d002      	beq.n	8000f62 <HAL_ADC_Init+0x10e>
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	015b      	lsls	r3, r3, #5
 8000f60:	e000      	b.n	8000f64 <HAL_ADC_Init+0x110>
 8000f62:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f64:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f6a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d101      	bne.n	8000f78 <HAL_ADC_Init+0x124>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e000      	b.n	8000f7a <HAL_ADC_Init+0x126>
 8000f78:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2124      	movs	r1, #36	; 0x24
 8000f80:	5c5b      	ldrb	r3, [r3, r1]
 8000f82:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f84:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7edb      	ldrb	r3, [r3, #27]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d115      	bne.n	8000fc0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7e9b      	ldrb	r3, [r3, #26]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0252      	lsls	r2, r2, #9
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	2220      	movs	r2, #32
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb8:	2201      	movs	r2, #1
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69da      	ldr	r2, [r3, #28]
 8000fc4:	23c2      	movs	r3, #194	; 0xc2
 8000fc6:	33ff      	adds	r3, #255	; 0xff
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d007      	beq.n	8000fdc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68d9      	ldr	r1, [r3, #12]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d01b      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d017      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001004:	2b02      	cmp	r3, #2
 8001006:	d013      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	2b03      	cmp	r3, #3
 800100e:	d00f      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	2b04      	cmp	r3, #4
 8001016:	d00b      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	2b05      	cmp	r3, #5
 800101e:	d007      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	2b06      	cmp	r3, #6
 8001026:	d003      	beq.n	8001030 <HAL_ADC_Init+0x1dc>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	2b07      	cmp	r3, #7
 800102e:	d112      	bne.n	8001056 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2107      	movs	r1, #7
 800103c:	438a      	bics	r2, r1
 800103e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6959      	ldr	r1, [r3, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	2207      	movs	r2, #7
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_ADC_Init+0x27c>)
 800105e:	4013      	ands	r3, r2
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	429a      	cmp	r2, r3
 8001064:	d10b      	bne.n	800107e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	2203      	movs	r2, #3
 8001072:	4393      	bics	r3, r2
 8001074:	2201      	movs	r2, #1
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800107c:	e01c      	b.n	80010b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	2212      	movs	r2, #18
 8001084:	4393      	bics	r3, r2
 8001086:	2210      	movs	r2, #16
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001092:	2201      	movs	r2, #1
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800109a:	230f      	movs	r3, #15
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010a2:	e009      	b.n	80010b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	2210      	movs	r2, #16
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	fffffefd 	.word	0xfffffefd
 80010cc:	fffe0219 	.word	0xfffe0219
 80010d0:	833fffe7 	.word	0x833fffe7

080010d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2317      	movs	r3, #23
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4013      	ands	r3, r2
 80010f2:	d15e      	bne.n	80011b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2234      	movs	r2, #52	; 0x34
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start_DMA+0x2e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e05e      	b.n	80011c0 <HAL_ADC_Start_DMA+0xec>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2234      	movs	r2, #52	; 0x34
 8001106:	2101      	movs	r1, #1
 8001108:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	7e5b      	ldrb	r3, [r3, #25]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d007      	beq.n	8001122 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001112:	2317      	movs	r3, #23
 8001114:	18fc      	adds	r4, r7, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	0018      	movs	r0, r3
 800111a:	f000 f983 	bl	8001424 <ADC_Enable>
 800111e:	0003      	movs	r3, r0
 8001120:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001122:	2317      	movs	r3, #23
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d146      	bne.n	80011ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <HAL_ADC_Start_DMA+0xf4>)
 8001132:	4013      	ands	r3, r2
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0052      	lsls	r2, r2, #1
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2234      	movs	r2, #52	; 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_ADC_Start_DMA+0xf8>)
 8001152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_ADC_Start_DMA+0xfc>)
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_ADC_Start_DMA+0x100>)
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	221c      	movs	r2, #28
 800116a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2110      	movs	r1, #16
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3340      	adds	r3, #64	; 0x40
 8001196:	0019      	movs	r1, r3
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f000 fb70 	bl	8001880 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2104      	movs	r1, #4
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	e003      	b.n	80011ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011b2:	2317      	movs	r3, #23
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2202      	movs	r2, #2
 80011b8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011ba:	2317      	movs	r3, #23
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b007      	add	sp, #28
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	fffff0fe 	.word	0xfffff0fe
 80011cc:	0800152d 	.word	0x0800152d
 80011d0:	080015e1 	.word	0x080015e1
 80011d4:	080015ff 	.word	0x080015ff

080011d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001212:	230f      	movs	r3, #15
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	055b      	lsls	r3, r3, #21
 8001226:	429a      	cmp	r2, r3
 8001228:	d011      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d00d      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	2b02      	cmp	r3, #2
 8001238:	d009      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	2b03      	cmp	r3, #3
 8001240:	d005      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	2b04      	cmp	r3, #4
 8001248:	d001      	beq.n	800124e <HAL_ADC_ConfigChannel+0x46>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2234      	movs	r2, #52	; 0x34
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ADC_ConfigChannel+0x54>
 8001258:	2302      	movs	r3, #2
 800125a:	e0d0      	b.n	80013fe <HAL_ADC_ConfigChannel+0x1f6>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2234      	movs	r2, #52	; 0x34
 8001260:	2101      	movs	r1, #1
 8001262:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2204      	movs	r2, #4
 800126c:	4013      	ands	r3, r2
 800126e:	d000      	beq.n	8001272 <HAL_ADC_ConfigChannel+0x6a>
 8001270:	e0b4      	b.n	80013dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a64      	ldr	r2, [pc, #400]	; (8001408 <HAL_ADC_ConfigChannel+0x200>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d100      	bne.n	800127e <HAL_ADC_ConfigChannel+0x76>
 800127c:	e082      	b.n	8001384 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	409a      	lsls	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	429a      	cmp	r2, r3
 800129e:	d037      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d033      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d02f      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d02b      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d027      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d023      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	d01f      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	2b07      	cmp	r3, #7
 80012d6:	d01b      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2107      	movs	r1, #7
 80012e4:	400b      	ands	r3, r1
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d012      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2107      	movs	r1, #7
 80012f6:	438a      	bics	r2, r1
 80012f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6959      	ldr	r1, [r3, #20]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2207      	movs	r2, #7
 8001306:	401a      	ands	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d007      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x120>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b11      	cmp	r3, #17
 800131e:	d003      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x120>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d163      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_ADC_ConfigChannel+0x204>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b10      	cmp	r3, #16
 8001332:	d009      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x140>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b11      	cmp	r3, #17
 800133a:	d102      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x13a>
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	03db      	lsls	r3, r3, #15
 8001340:	e004      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	045b      	lsls	r3, r3, #17
 8001346:	e001      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_ADC_ConfigChannel+0x204>)
 800134e:	430b      	orrs	r3, r1
 8001350:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d14a      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_ADC_ConfigChannel+0x208>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	492d      	ldr	r1, [pc, #180]	; (8001414 <HAL_ADC_ConfigChannel+0x20c>)
 8001360:	0018      	movs	r0, r3
 8001362:	f7fe fed1 	bl	8000108 <__udivsi3>
 8001366:	0003      	movs	r3, r0
 8001368:	001a      	movs	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	189b      	adds	r3, r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001374:	e002      	b.n	800137c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3b01      	subs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x16e>
 8001382:	e035      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	4099      	lsls	r1, r3
 8001392:	000b      	movs	r3, r1
 8001394:	43d9      	mvns	r1, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d007      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x1ae>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x1ae>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d11c      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_ADC_ConfigChannel+0x204>)
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d007      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x1ca>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b11      	cmp	r3, #17
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x1c6>
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_ADC_ConfigChannel+0x210>)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_ADC_ConfigChannel+0x214>)
 80013d0:	e000      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_ADC_ConfigChannel+0x218>)
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <HAL_ADC_ConfigChannel+0x204>)
 80013d6:	400b      	ands	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e009      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	2220      	movs	r2, #32
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2234      	movs	r2, #52	; 0x34
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	00001001 	.word	0x00001001
 800140c:	40012708 	.word	0x40012708
 8001410:	20000000 	.word	0x20000000
 8001414:	000f4240 	.word	0x000f4240
 8001418:	ffbfffff 	.word	0xffbfffff
 800141c:	feffffff 	.word	0xfeffffff
 8001420:	ff7fffff 	.word	0xff7fffff

08001424 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b01      	cmp	r3, #1
 8001440:	d112      	bne.n	8001468 <ADC_Enable+0x44>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	2b01      	cmp	r3, #1
 800144e:	d009      	beq.n	8001464 <ADC_Enable+0x40>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	401a      	ands	r2, r3
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	429a      	cmp	r2, r3
 8001462:	d101      	bne.n	8001468 <ADC_Enable+0x44>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <ADC_Enable+0x46>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d152      	bne.n	8001514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <ADC_Enable+0xfc>)
 8001476:	4013      	ands	r3, r2
 8001478:	d00d      	beq.n	8001496 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	2210      	movs	r2, #16
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	2201      	movs	r2, #1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e03f      	b.n	8001516 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <ADC_Enable+0x100>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <ADC_Enable+0x104>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7fe fe2b 	bl	8000108 <__udivsi3>
 80014b2:	0003      	movs	r3, r0
 80014b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014b6:	e002      	b.n	80014be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fcbc 	bl	8000e40 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014cc:	e01b      	b.n	8001506 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ce:	f7ff fcb7 	bl	8000e40 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d914      	bls.n	8001506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00d      	beq.n	8001506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	2210      	movs	r2, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fa:	2201      	movs	r2, #1
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e007      	b.n	8001516 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	2b01      	cmp	r3, #1
 8001512:	d1dc      	bne.n	80014ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	80000017 	.word	0x80000017
 8001524:	20000000 	.word	0x20000000
 8001528:	000f4240 	.word	0x000f4240

0800152c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	2250      	movs	r2, #80	; 0x50
 8001540:	4013      	ands	r3, r2
 8001542:	d140      	bne.n	80015c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d12d      	bne.n	80015bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2208      	movs	r2, #8
 8001570:	4013      	ands	r3, r2
 8001572:	2b08      	cmp	r3, #8
 8001574:	d122      	bne.n	80015bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d110      	bne.n	80015a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	210c      	movs	r1, #12
 800158e:	438a      	bics	r2, r1
 8001590:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <ADC_DMAConvCplt+0xb0>)
 8001598:	4013      	ands	r3, r2
 800159a:	2201      	movs	r2, #1
 800159c:	431a      	orrs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
 80015a2:	e00b      	b.n	80015bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	2220      	movs	r2, #32
 80015aa:	431a      	orrs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b4:	2201      	movs	r2, #1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fe0a 	bl	80011d8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80015c4:	e005      	b.n	80015d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	0010      	movs	r0, r2
 80015d0:	4798      	blx	r3
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	fffffefe 	.word	0xfffffefe

080015e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fdf9 	bl	80011e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}

080015fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	2240      	movs	r2, #64	; 0x40
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	2204      	movs	r2, #4
 800161e:	431a      	orrs	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff fde6 	bl	80011f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	0002      	movs	r2, r0
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b7f      	cmp	r3, #127	; 0x7f
 8001646:	d809      	bhi.n	800165c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	001a      	movs	r2, r3
 800164e:	231f      	movs	r3, #31
 8001650:	401a      	ands	r2, r3
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_EnableIRQ+0x30>)
 8001654:	2101      	movs	r1, #1
 8001656:	4091      	lsls	r1, r2
 8001658:	000a      	movs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
  }
}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b7f      	cmp	r3, #127	; 0x7f
 800167c:	d828      	bhi.n	80016d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167e:	4a2f      	ldr	r2, [pc, #188]	; (800173c <__NVIC_SetPriority+0xd4>)
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	33c0      	adds	r3, #192	; 0xc0
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	589b      	ldr	r3, [r3, r2]
 800168e:	1dfa      	adds	r2, r7, #7
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	0011      	movs	r1, r2
 8001694:	2203      	movs	r2, #3
 8001696:	400a      	ands	r2, r1
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	21ff      	movs	r1, #255	; 0xff
 800169c:	4091      	lsls	r1, r2
 800169e:	000a      	movs	r2, r1
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	401a      	ands	r2, r3
 80016a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	22ff      	movs	r2, #255	; 0xff
 80016ac:	401a      	ands	r2, r3
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	2303      	movs	r3, #3
 80016b6:	4003      	ands	r3, r0
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	481f      	ldr	r0, [pc, #124]	; (800173c <__NVIC_SetPriority+0xd4>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	430a      	orrs	r2, r1
 80016c8:	33c0      	adds	r3, #192	; 0xc0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ce:	e031      	b.n	8001734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <__NVIC_SetPriority+0xd8>)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0019      	movs	r1, r3
 80016d8:	230f      	movs	r3, #15
 80016da:	400b      	ands	r3, r1
 80016dc:	3b08      	subs	r3, #8
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3306      	adds	r3, #6
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	0011      	movs	r1, r2
 80016f0:	2203      	movs	r2, #3
 80016f2:	400a      	ands	r2, r1
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	21ff      	movs	r1, #255	; 0xff
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	43d2      	mvns	r2, r2
 80016fe:	401a      	ands	r2, r3
 8001700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	22ff      	movs	r2, #255	; 0xff
 8001708:	401a      	ands	r2, r3
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	2303      	movs	r3, #3
 8001712:	4003      	ands	r3, r0
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <__NVIC_SetPriority+0xd8>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	001c      	movs	r4, r3
 8001720:	230f      	movs	r3, #15
 8001722:	4023      	ands	r3, r4
 8001724:	3b08      	subs	r3, #8
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	430a      	orrs	r2, r1
 800172a:	3306      	adds	r3, #6
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	18c3      	adds	r3, r0, r3
 8001730:	3304      	adds	r3, #4
 8001732:	601a      	str	r2, [r3, #0]
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b003      	add	sp, #12
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	045b      	lsls	r3, r3, #17
 8001754:	429a      	cmp	r2, r3
 8001756:	d301      	bcc.n	800175c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001758:	2301      	movs	r3, #1
 800175a:	e010      	b.n	800177e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <SysTick_Config+0x44>)
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	3a01      	subs	r2, #1
 8001762:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001764:	2301      	movs	r3, #1
 8001766:	425b      	negs	r3, r3
 8001768:	2103      	movs	r1, #3
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff ff7c 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x44>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x44>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	210f      	movs	r1, #15
 8001798:	187b      	adds	r3, r7, r1
 800179a:	1c02      	adds	r2, r0, #0
 800179c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	0011      	movs	r1, r2
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	0002      	movs	r2, r0
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff ff33 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff ffaf 	bl	8001744 <SysTick_Config>
 80017e6:	0003      	movs	r3, r0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e036      	b.n	8001874 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2221      	movs	r2, #33	; 0x21
 800180a:	2102      	movs	r1, #2
 800180c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_DMA_Init+0x8c>)
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	0018      	movs	r0, r3
 8001858:	f000 f946 	bl	8001ae8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2221      	movs	r2, #33	; 0x21
 8001866:	2101      	movs	r1, #1
 8001868:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	ffffc00f 	.word	0xffffc00f

08001880 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800188e:	2317      	movs	r3, #23
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_DMA_Start_IT+0x24>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e04f      	b.n	8001944 <HAL_DMA_Start_IT+0xc4>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2221      	movs	r2, #33	; 0x21
 80018b0:	5c9b      	ldrb	r3, [r3, r2]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d13a      	bne.n	800192e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2221      	movs	r2, #33	; 0x21
 80018bc:	2102      	movs	r1, #2
 80018be:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f8d7 	bl	8001a90 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	210e      	movs	r1, #14
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00f      	b.n	800191c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	210a      	movs	r1, #10
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e007      	b.n	800193e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001936:	2317      	movs	r3, #23
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800193e:	2317      	movs	r3, #23
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2204      	movs	r2, #4
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	d024      	beq.n	80019be <HAL_DMA_IRQHandler+0x72>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2204      	movs	r2, #4
 8001978:	4013      	ands	r3, r2
 800197a:	d020      	beq.n	80019be <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2220      	movs	r2, #32
 8001984:	4013      	ands	r3, r2
 8001986:	d107      	bne.n	8001998 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2104      	movs	r1, #4
 8001994:	438a      	bics	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	2104      	movs	r1, #4
 80019a2:	4091      	lsls	r1, r2
 80019a4:	000a      	movs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d100      	bne.n	80019b2 <HAL_DMA_IRQHandler+0x66>
 80019b0:	e06a      	b.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	0010      	movs	r0, r2
 80019ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019bc:	e064      	b.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2202      	movs	r2, #2
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	d02b      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xda>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d027      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2220      	movs	r2, #32
 80019de:	4013      	ands	r3, r2
 80019e0:	d10b      	bne.n	80019fa <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	210a      	movs	r1, #10
 80019ee:	438a      	bics	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2221      	movs	r2, #33	; 0x21
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	2102      	movs	r1, #2
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	0010      	movs	r0, r2
 8001a22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a24:	e030      	b.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	d028      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d024      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	210e      	movs	r1, #14
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2101      	movs	r1, #1
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2221      	movs	r2, #33	; 0x21
 8001a68:	2101      	movs	r1, #1
 8001a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	0010      	movs	r0, r2
 8001a84:	4798      	blx	r3
    }
  }
}
 8001a86:	e7ff      	b.n	8001a88 <HAL_DMA_IRQHandler+0x13c>
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b004      	add	sp, #16
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4091      	lsls	r1, r2
 8001aaa:	000a      	movs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d108      	bne.n	8001ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ace:	e007      	b.n	8001ae0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b004      	add	sp, #16
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <DMA_CalcBaseAndBitshift+0x30>)
 8001af6:	4694      	mov	ip, r2
 8001af8:	4463      	add	r3, ip
 8001afa:	2114      	movs	r1, #20
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7fe fb03 	bl	8000108 <__udivsi3>
 8001b02:	0003      	movs	r3, r0
 8001b04:	009a      	lsls	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <DMA_CalcBaseAndBitshift+0x34>)
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	bffdfff8 	.word	0xbffdfff8
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e155      	b.n	8001ddc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <HAL_GPIO_Init+0x28>
 8001b46:	e146      	b.n	8001dd6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	2201      	movs	r2, #1
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	58d3      	ldr	r3, [r2, r3]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2107      	movs	r1, #7
 8001c36:	400b      	ands	r3, r1
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	23c0      	movs	r3, #192	; 0xc0
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d100      	bne.n	8001c94 <HAL_GPIO_Init+0x174>
 8001c92:	e0a0      	b.n	8001dd6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	4b56      	ldr	r3, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x2d4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	589b      	ldr	r3, [r3, r2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	2390      	movs	r3, #144	; 0x90
 8001cd4:	05db      	lsls	r3, r3, #23
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a47      	ldr	r2, [pc, #284]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x1ea>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a46      	ldr	r2, [pc, #280]	; (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x1e6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a45      	ldr	r2, [pc, #276]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x1e2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x1de>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e008      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	2103      	movs	r1, #3
 8001d14:	400a      	ands	r2, r1
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <HAL_GPIO_Init+0x2d8>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	035b      	lsls	r3, r3, #13
 8001d46:	4013      	ands	r3, r2
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	039b      	lsls	r3, r3, #14
 8001d70:	4013      	ands	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	1e13      	subs	r3, r2, #0
 8001de6:	d000      	beq.n	8001dea <HAL_GPIO_Init+0x2ca>
 8001de8:	e6a2      	b.n	8001b30 <HAL_GPIO_Init+0x10>
  } 
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b006      	add	sp, #24
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	48000c00 	.word	0x48000c00
 8001e08:	48001000 	.word	0x48001000
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	0008      	movs	r0, r1
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	1cbb      	adds	r3, r7, #2
 8001e1e:	1c02      	adds	r2, r0, #0
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	1c7b      	adds	r3, r7, #1
 8001e24:	1c0a      	adds	r2, r1, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	1c7b      	adds	r3, r7, #1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e30:	1cbb      	adds	r3, r7, #2
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e003      	b.n	8001e42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	1cbb      	adds	r3, r7, #2
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e082      	b.n	8001f64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2241      	movs	r2, #65	; 0x41
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d107      	bne.n	8001e7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2240      	movs	r2, #64	; 0x40
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe fddb 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2241      	movs	r2, #65	; 0x41
 8001e7e:	2124      	movs	r1, #36	; 0x24
 8001e80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	438a      	bics	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4934      	ldr	r1, [pc, #208]	; (8001f6c <HAL_I2C_Init+0x120>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4931      	ldr	r1, [pc, #196]	; (8001f70 <HAL_I2C_Init+0x124>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d108      	bne.n	8001eca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0209      	lsls	r1, r1, #8
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e007      	b.n	8001eda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2184      	movs	r1, #132	; 0x84
 8001ed4:	0209      	lsls	r1, r1, #8
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d104      	bne.n	8001eec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	491f      	ldr	r1, [pc, #124]	; (8001f74 <HAL_I2C_Init+0x128>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	491a      	ldr	r1, [pc, #104]	; (8001f70 <HAL_I2C_Init+0x124>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69d9      	ldr	r1, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2241      	movs	r2, #65	; 0x41
 8001f50:	2120      	movs	r1, #32
 8001f52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2242      	movs	r2, #66	; 0x42
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f0ffffff 	.word	0xf0ffffff
 8001f70:	ffff7fff 	.word	0xffff7fff
 8001f74:	02008000 	.word	0x02008000

08001f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	; 0x41
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d138      	bne.n	8002000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e032      	b.n	8002002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2241      	movs	r2, #65	; 0x41
 8001fa8:	2124      	movs	r1, #36	; 0x24
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	438a      	bics	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4911      	ldr	r1, [pc, #68]	; (800200c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2241      	movs	r2, #65	; 0x41
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	ffffefff 	.word	0xffffefff

08002010 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2241      	movs	r2, #65	; 0x41
 800201e:	5c9b      	ldrb	r3, [r3, r2]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	d139      	bne.n	800209a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002030:	2302      	movs	r3, #2
 8002032:	e033      	b.n	800209c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2241      	movs	r2, #65	; 0x41
 8002040:	2124      	movs	r1, #36	; 0x24
 8002042:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2241      	movs	r2, #65	; 0x41
 800208a:	2120      	movs	r1, #32
 800208c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2240      	movs	r2, #64	; 0x40
 8002092:	2100      	movs	r1, #0
 8002094:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b004      	add	sp, #16
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	fffff0ff 	.word	0xfffff0ff

080020a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af06      	add	r7, sp, #24
 80020ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0f0      	b.n	800229c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a79      	ldr	r2, [pc, #484]	; (80022a4 <HAL_PCD_Init+0x1fc>)
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d108      	bne.n	80020d8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	23aa      	movs	r3, #170	; 0xaa
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	2100      	movs	r1, #0
 80020ce:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fde6 	bl	8000ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a72      	ldr	r2, [pc, #456]	; (80022a4 <HAL_PCD_Init+0x1fc>)
 80020dc:	2103      	movs	r1, #3
 80020de:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f001 f837 	bl	8003158 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	230f      	movs	r3, #15
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e049      	b.n	8002188 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f4:	200f      	movs	r0, #15
 80020f6:	183b      	adds	r3, r7, r0
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	0013      	movs	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	189b      	adds	r3, r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	18cb      	adds	r3, r1, r3
 8002108:	3301      	adds	r3, #1
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210e:	183b      	adds	r3, r7, r0
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	0013      	movs	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	189b      	adds	r3, r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	183a      	adds	r2, r7, r0
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002124:	183b      	adds	r3, r7, r0
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	0013      	movs	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	189b      	adds	r3, r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	18cb      	adds	r3, r1, r3
 8002136:	3303      	adds	r3, #3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800213c:	183b      	adds	r3, r7, r0
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	0013      	movs	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	189b      	adds	r3, r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	18cb      	adds	r3, r1, r3
 800214c:	3338      	adds	r3, #56	; 0x38
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002152:	183b      	adds	r3, r7, r0
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	0013      	movs	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	189b      	adds	r3, r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	18cb      	adds	r3, r1, r3
 8002162:	333c      	adds	r3, #60	; 0x3c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002168:	183b      	adds	r3, r7, r0
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	0013      	movs	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	189b      	adds	r3, r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	18cb      	adds	r3, r1, r3
 8002178:	3340      	adds	r3, #64	; 0x40
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	183b      	adds	r3, r7, r0
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	183b      	adds	r3, r7, r0
 8002184:	3201      	adds	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	210f      	movs	r1, #15
 800218a:	187b      	adds	r3, r7, r1
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3ae      	bcc.n	80020f4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e056      	b.n	800224c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800219e:	240f      	movs	r4, #15
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	236a      	movs	r3, #106	; 0x6a
 80021a8:	33ff      	adds	r3, #255	; 0xff
 80021aa:	0019      	movs	r1, r3
 80021ac:	0013      	movs	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	189b      	adds	r3, r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	18c3      	adds	r3, r0, r3
 80021b6:	185b      	adds	r3, r3, r1
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	23b4      	movs	r3, #180	; 0xb4
 80021c4:	0059      	lsls	r1, r3, #1
 80021c6:	0013      	movs	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	18c3      	adds	r3, r0, r3
 80021d0:	185b      	adds	r3, r3, r1
 80021d2:	193a      	adds	r2, r7, r4
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	236c      	movs	r3, #108	; 0x6c
 80021e0:	33ff      	adds	r3, #255	; 0xff
 80021e2:	0019      	movs	r1, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	189b      	adds	r3, r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	18c3      	adds	r3, r0, r3
 80021ee:	185b      	adds	r3, r3, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	23bc      	movs	r3, #188	; 0xbc
 80021fc:	0059      	lsls	r1, r3, #1
 80021fe:	0013      	movs	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	189b      	adds	r3, r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	18c3      	adds	r3, r0, r3
 8002208:	185b      	adds	r3, r3, r1
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800220e:	193b      	adds	r3, r7, r4
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	23be      	movs	r3, #190	; 0xbe
 8002216:	0059      	lsls	r1, r3, #1
 8002218:	0013      	movs	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	189b      	adds	r3, r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	18c3      	adds	r3, r0, r3
 8002222:	185b      	adds	r3, r3, r1
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	0059      	lsls	r1, r3, #1
 8002232:	0013      	movs	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	189b      	adds	r3, r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	18c3      	adds	r3, r0, r3
 800223c:	185b      	adds	r3, r3, r1
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	193b      	adds	r3, r7, r4
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	193b      	adds	r3, r7, r4
 8002248:	3201      	adds	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	230f      	movs	r3, #15
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d3a1      	bcc.n	800219e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	466a      	mov	r2, sp
 8002262:	0011      	movs	r1, r2
 8002264:	001a      	movs	r2, r3
 8002266:	3210      	adds	r2, #16
 8002268:	ca70      	ldmia	r2!, {r4, r5, r6}
 800226a:	c170      	stmia	r1!, {r4, r5, r6}
 800226c:	ca30      	ldmia	r2!, {r4, r5}
 800226e:	c130      	stmia	r1!, {r4, r5}
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f000 ff89 	bl	800318c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2224      	movs	r2, #36	; 0x24
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_PCD_Init+0x1fc>)
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d103      	bne.n	800229a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f807 	bl	80022a8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	0018      	movs	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	b005      	add	sp, #20
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	000002a9 	.word	0x000002a9

080022a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	23ba      	movs	r3, #186	; 0xba
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	2101      	movs	r1, #1
 80022be:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	23b8      	movs	r3, #184	; 0xb8
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	2100      	movs	r1, #0
 80022c8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2254      	movs	r2, #84	; 0x54
 80022ce:	5a9b      	ldrh	r3, [r3, r2]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2201      	movs	r2, #1
 80022d4:	4313      	orrs	r3, r2
 80022d6:	b299      	uxth	r1, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2254      	movs	r2, #84	; 0x54
 80022dc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2254      	movs	r2, #84	; 0x54
 80022e2:	5a9b      	ldrh	r3, [r3, r2]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2202      	movs	r2, #2
 80022e8:	4313      	orrs	r3, r2
 80022ea:	b299      	uxth	r1, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2254      	movs	r2, #84	; 0x54
 80022f0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b004      	add	sp, #16
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	f000 fb76 	bl	80029fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	d100      	bne.n	800231c <HAL_RCC_OscConfig+0x20>
 800231a:	e08e      	b.n	800243a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800231c:	4bc5      	ldr	r3, [pc, #788]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	220c      	movs	r2, #12
 8002322:	4013      	ands	r3, r2
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00e      	beq.n	8002346 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002328:	4bc2      	ldr	r3, [pc, #776]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	220c      	movs	r2, #12
 800232e:	4013      	ands	r3, r2
 8002330:	2b08      	cmp	r3, #8
 8002332:	d117      	bne.n	8002364 <HAL_RCC_OscConfig+0x68>
 8002334:	4bbf      	ldr	r3, [pc, #764]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	23c0      	movs	r3, #192	; 0xc0
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	401a      	ands	r2, r3
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	025b      	lsls	r3, r3, #9
 8002342:	429a      	cmp	r2, r3
 8002344:	d10e      	bne.n	8002364 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002346:	4bbb      	ldr	r3, [pc, #748]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	4013      	ands	r3, r2
 8002350:	d100      	bne.n	8002354 <HAL_RCC_OscConfig+0x58>
 8002352:	e071      	b.n	8002438 <HAL_RCC_OscConfig+0x13c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d000      	beq.n	800235e <HAL_RCC_OscConfig+0x62>
 800235c:	e06c      	b.n	8002438 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	f000 fb4c 	bl	80029fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x80>
 800236c:	4bb1      	ldr	r3, [pc, #708]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0249      	lsls	r1, r1, #9
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e02f      	b.n	80023dc <HAL_RCC_OscConfig+0xe0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0xa2>
 8002384:	4bab      	ldr	r3, [pc, #684]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4baa      	ldr	r3, [pc, #680]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800238a:	49ab      	ldr	r1, [pc, #684]	; (8002638 <HAL_RCC_OscConfig+0x33c>)
 800238c:	400a      	ands	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	4ba8      	ldr	r3, [pc, #672]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4ba7      	ldr	r3, [pc, #668]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002396:	49a9      	ldr	r1, [pc, #676]	; (800263c <HAL_RCC_OscConfig+0x340>)
 8002398:	400a      	ands	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e01e      	b.n	80023dc <HAL_RCC_OscConfig+0xe0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0xc8>
 80023a6:	4ba3      	ldr	r3, [pc, #652]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4ba2      	ldr	r3, [pc, #648]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	02c9      	lsls	r1, r1, #11
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	4b9f      	ldr	r3, [pc, #636]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	0249      	lsls	r1, r1, #9
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xe0>
 80023c4:	4b9b      	ldr	r3, [pc, #620]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b9a      	ldr	r3, [pc, #616]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023ca:	499b      	ldr	r1, [pc, #620]	; (8002638 <HAL_RCC_OscConfig+0x33c>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4b98      	ldr	r3, [pc, #608]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b97      	ldr	r3, [pc, #604]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80023d6:	4999      	ldr	r1, [pc, #612]	; (800263c <HAL_RCC_OscConfig+0x340>)
 80023d8:	400a      	ands	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d014      	beq.n	800240e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fd2c 	bl	8000e40 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ee:	f7fe fd27 	bl	8000e40 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b64      	cmp	r3, #100	; 0x64
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e2fd      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002400:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	029b      	lsls	r3, r3, #10
 8002408:	4013      	ands	r3, r2
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0xf2>
 800240c:	e015      	b.n	800243a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fd17 	bl	8000e40 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe fd12 	bl	8000e40 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e2e8      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	029b      	lsls	r3, r3, #10
 8002432:	4013      	ands	r3, r2
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x11c>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2202      	movs	r2, #2
 8002440:	4013      	ands	r3, r2
 8002442:	d100      	bne.n	8002446 <HAL_RCC_OscConfig+0x14a>
 8002444:	e06c      	b.n	8002520 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	220c      	movs	r2, #12
 800244c:	4013      	ands	r3, r2
 800244e:	d00e      	beq.n	800246e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002450:	4b78      	ldr	r3, [pc, #480]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	220c      	movs	r2, #12
 8002456:	4013      	ands	r3, r2
 8002458:	2b08      	cmp	r3, #8
 800245a:	d11f      	bne.n	800249c <HAL_RCC_OscConfig+0x1a0>
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	23c0      	movs	r3, #192	; 0xc0
 8002462:	025b      	lsls	r3, r3, #9
 8002464:	401a      	ands	r2, r3
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	429a      	cmp	r2, r3
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b71      	ldr	r3, [pc, #452]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x188>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e2bb      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b6b      	ldr	r3, [pc, #428]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	22f8      	movs	r2, #248	; 0xf8
 800248a:	4393      	bics	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00da      	lsls	r2, r3, #3
 8002494:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e041      	b.n	8002520 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d024      	beq.n	80024ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b63      	ldr	r3, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b62      	ldr	r3, [pc, #392]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fcc6 	bl	8000e40 <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fcc1 	bl	8000e40 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e297      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	d0f1      	beq.n	80024ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	22f8      	movs	r2, #248	; 0xf8
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	00da      	lsls	r2, r3, #3
 80024e6:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e018      	b.n	8002520 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	438a      	bics	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe fca1 	bl	8000e40 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe fc9c 	bl	8000e40 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e272      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d1f1      	bne.n	8002504 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	4013      	ands	r3, r2
 8002528:	d036      	beq.n	8002598 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b40      	ldr	r3, [pc, #256]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002538:	2101      	movs	r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7fe fc7f 	bl	8000e40 <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fc7a 	bl	8000e40 <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e250      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d0f1      	beq.n	8002548 <HAL_RCC_OscConfig+0x24c>
 8002564:	e018      	b.n	8002598 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800256c:	2101      	movs	r1, #1
 800256e:	438a      	bics	r2, r1
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7fe fc65 	bl	8000e40 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe fc60 	bl	8000e40 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e236      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d1f1      	bne.n	800257c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2204      	movs	r2, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	d100      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2a8>
 80025a2:	e0b5      	b.n	8002710 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a4:	201f      	movs	r0, #31
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4013      	ands	r3, r2
 80025b6:	d110      	bne.n	80025da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80025be:	2180      	movs	r1, #128	; 0x80
 80025c0:	0549      	lsls	r1, r1, #21
 80025c2:	430a      	orrs	r2, r1
 80025c4:	61da      	str	r2, [r3, #28]
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	055b      	lsls	r3, r3, #21
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025d4:	183b      	adds	r3, r7, r0
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_OscConfig+0x344>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	d11a      	bne.n	800261c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_RCC_OscConfig+0x344>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x344>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0049      	lsls	r1, r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fc24 	bl	8000e40 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe fc1f 	bl	8000e40 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1f5      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x344>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10f      	bne.n	8002644 <HAL_RCC_OscConfig+0x348>
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	4b02      	ldr	r3, [pc, #8]	; (8002634 <HAL_RCC_OscConfig+0x338>)
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	621a      	str	r2, [r3, #32]
 8002630:	e036      	b.n	80026a0 <HAL_RCC_OscConfig+0x3a4>
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40021000 	.word	0x40021000
 8002638:	fffeffff 	.word	0xfffeffff
 800263c:	fffbffff 	.word	0xfffbffff
 8002640:	40007000 	.word	0x40007000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x36a>
 800264c:	4bca      	ldr	r3, [pc, #808]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	4bc9      	ldr	r3, [pc, #804]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002652:	2101      	movs	r1, #1
 8002654:	438a      	bics	r2, r1
 8002656:	621a      	str	r2, [r3, #32]
 8002658:	4bc7      	ldr	r3, [pc, #796]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	4bc6      	ldr	r3, [pc, #792]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800265e:	2104      	movs	r1, #4
 8002660:	438a      	bics	r2, r1
 8002662:	621a      	str	r2, [r3, #32]
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x3a4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x38c>
 800266e:	4bc2      	ldr	r3, [pc, #776]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	4bc1      	ldr	r3, [pc, #772]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002674:	2104      	movs	r1, #4
 8002676:	430a      	orrs	r2, r1
 8002678:	621a      	str	r2, [r3, #32]
 800267a:	4bbf      	ldr	r3, [pc, #764]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	4bbe      	ldr	r3, [pc, #760]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002680:	2101      	movs	r1, #1
 8002682:	430a      	orrs	r2, r1
 8002684:	621a      	str	r2, [r3, #32]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x3a4>
 8002688:	4bbb      	ldr	r3, [pc, #748]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800268a:	6a1a      	ldr	r2, [r3, #32]
 800268c:	4bba      	ldr	r3, [pc, #744]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	4bb8      	ldr	r3, [pc, #736]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	4bb7      	ldr	r3, [pc, #732]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800269a:	2104      	movs	r1, #4
 800269c:	438a      	bics	r2, r1
 800269e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d014      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a8:	f7fe fbca 	bl	8000e40 <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fbc5 	bl	8000e40 <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	4aaf      	ldr	r2, [pc, #700]	; (800297c <HAL_RCC_OscConfig+0x680>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e19a      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	4bac      	ldr	r3, [pc, #688]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3b6>
 80026d0:	e013      	b.n	80026fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fbb5 	bl	8000e40 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	e009      	b.n	80026f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fbb0 	bl	8000e40 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4aa5      	ldr	r2, [pc, #660]	; (800297c <HAL_RCC_OscConfig+0x680>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e185      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	4ba1      	ldr	r3, [pc, #644]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026fa:	231f      	movs	r3, #31
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b9c      	ldr	r3, [pc, #624]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	4b9b      	ldr	r3, [pc, #620]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800270a:	499d      	ldr	r1, [pc, #628]	; (8002980 <HAL_RCC_OscConfig+0x684>)
 800270c:	400a      	ands	r2, r1
 800270e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2210      	movs	r2, #16
 8002716:	4013      	ands	r3, r2
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d12a      	bne.n	8002778 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002722:	4b95      	ldr	r3, [pc, #596]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002726:	4b94      	ldr	r3, [pc, #592]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002728:	2104      	movs	r1, #4
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800272e:	4b92      	ldr	r3, [pc, #584]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002732:	4b91      	ldr	r3, [pc, #580]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002734:	2101      	movs	r1, #1
 8002736:	430a      	orrs	r2, r1
 8002738:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7fe fb81 	bl	8000e40 <HAL_GetTick>
 800273e:	0003      	movs	r3, r0
 8002740:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002744:	f7fe fb7c 	bl	8000e40 <HAL_GetTick>
 8002748:	0002      	movs	r2, r0
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e152      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002756:	4b88      	ldr	r3, [pc, #544]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d0f1      	beq.n	8002744 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002760:	4b85      	ldr	r3, [pc, #532]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	22f8      	movs	r2, #248	; 0xf8
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	00da      	lsls	r2, r3, #3
 8002770:	4b81      	ldr	r3, [pc, #516]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	e034      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	3305      	adds	r3, #5
 800277e:	d111      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002780:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002784:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002786:	2104      	movs	r1, #4
 8002788:	438a      	bics	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800278c:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	22f8      	movs	r2, #248	; 0xf8
 8002792:	4393      	bics	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	00da      	lsls	r2, r3, #3
 800279c:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34
 80027a2:	e01e      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027a4:	4b74      	ldr	r3, [pc, #464]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a8:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027aa:	2104      	movs	r1, #4
 80027ac:	430a      	orrs	r2, r1
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027b0:	4b71      	ldr	r3, [pc, #452]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b4:	4b70      	ldr	r3, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	438a      	bics	r2, r1
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fb40 	bl	8000e40 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027c6:	f7fe fb3b 	bl	8000e40 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e111      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027d8:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d1f1      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2220      	movs	r2, #32
 80027e8:	4013      	ands	r3, r2
 80027ea:	d05c      	beq.n	80028a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80027ec:	4b62      	ldr	r3, [pc, #392]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	220c      	movs	r2, #12
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d00e      	beq.n	8002816 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80027f8:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	220c      	movs	r2, #12
 80027fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002800:	2b08      	cmp	r3, #8
 8002802:	d114      	bne.n	800282e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002804:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	025b      	lsls	r3, r3, #9
 800280c:	401a      	ands	r2, r3
 800280e:	23c0      	movs	r3, #192	; 0xc0
 8002810:	025b      	lsls	r3, r3, #9
 8002812:	429a      	cmp	r2, r3
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002816:	4b58      	ldr	r3, [pc, #352]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	029b      	lsls	r3, r3, #10
 800281e:	4013      	ands	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5a8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d03c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0e6      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01b      	beq.n	800286e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002836:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283a:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0249      	lsls	r1, r1, #9
 8002840:	430a      	orrs	r2, r1
 8002842:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fafc 	bl	8000e40 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800284e:	f7fe faf7 	bl	8000e40 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0cd      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002860:	4b45      	ldr	r3, [pc, #276]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	4013      	ands	r3, r2
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x552>
 800286c:	e01b      	b.n	80028a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800286e:	4b42      	ldr	r3, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002872:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002874:	4943      	ldr	r1, [pc, #268]	; (8002984 <HAL_RCC_OscConfig+0x688>)
 8002876:	400a      	ands	r2, r1
 8002878:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fae1 	bl	8000e40 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002884:	f7fe fadc 	bl	8000e40 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0b2      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	4013      	ands	r3, r2
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x588>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d100      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
 80028ae:	e0a4      	b.n	80029fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	220c      	movs	r2, #12
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x5c2>
 80028bc:	e078      	b.n	80029b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d14c      	bne.n	8002960 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80028cc:	492e      	ldr	r1, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x68c>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fab5 	bl	8000e40 <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fab0 	bl	8000e40 <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e086      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	049b      	lsls	r3, r3, #18
 80028f6:	4013      	ands	r3, r2
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	220f      	movs	r2, #15
 8002900:	4393      	bics	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800290a:	430a      	orrs	r2, r1
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_RCC_OscConfig+0x690>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	431a      	orrs	r2, r3
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0449      	lsls	r1, r1, #17
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe fa83 	bl	8000e40 <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fa7e 	bl	8000e40 <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e054      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	049b      	lsls	r3, r3, #18
 800295a:	4013      	ands	r3, r2
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x644>
 800295e:	e04c      	b.n	80029fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_OscConfig+0x67c>)
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <HAL_RCC_OscConfig+0x68c>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fa68 	bl	8000e40 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x6a6>
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40021000 	.word	0x40021000
 800297c:	00001388 	.word	0x00001388
 8002980:	efffffff 	.word	0xefffffff
 8002984:	fffeffff 	.word	0xfffeffff
 8002988:	feffffff 	.word	0xfeffffff
 800298c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fa56 	bl	8000e40 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e02c      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_RCC_OscConfig+0x708>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	049b      	lsls	r3, r3, #18
 80029aa:	4013      	ands	r3, r2
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x694>
 80029ae:	e024      	b.n	80029fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e01f      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_RCC_OscConfig+0x708>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x708>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	23c0      	movs	r3, #192	; 0xc0
 80029cc:	025b      	lsls	r3, r3, #9
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10e      	bne.n	80029f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	220f      	movs	r2, #15
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	23f0      	movs	r3, #240	; 0xf0
 80029ea:	039b      	lsls	r3, r3, #14
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b008      	add	sp, #32
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0bf      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d911      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4393      	bics	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3c:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0a6      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d015      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d006      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a62:	4b51      	ldr	r3, [pc, #324]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a68:	21e0      	movs	r1, #224	; 0xe0
 8002a6a:	00c9      	lsls	r1, r1, #3
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	22f0      	movs	r2, #240	; 0xf0
 8002a76:	4393      	bics	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d04c      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	029b      	lsls	r3, r3, #10
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d120      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07a      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	049b      	lsls	r3, r3, #18
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d114      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06e      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e062      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e05b      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	4393      	bics	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af8:	f7fe f9a2 	bl	8000e40 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b00:	e009      	b.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b02:	f7fe f99d 	bl	8000e40 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_RCC_ClockConfig+0x1a4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e042      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1ec      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4013      	ands	r3, r2
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d211      	bcs.n	8002b5a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_RCC_ClockConfig+0x19c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e020      	b.n	8002b9c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	4013      	ands	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_RCC_ClockConfig+0x1a8>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b78:	f000 f820 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7c:	0001      	movs	r1, r0
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	220f      	movs	r2, #15
 8002b86:	4013      	ands	r3, r2
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x1ac>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	000a      	movs	r2, r1
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b0>)
 8002b92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe f90d 	bl	8000db4 <HAL_InitTick>
  
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b004      	add	sp, #16
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	00001388 	.word	0x00001388
 8002bb0:	fffff8ff 	.word	0xfffff8ff
 8002bb4:	0800324c 	.word	0x0800324c
 8002bb8:	20000000 	.word	0x20000000

08002bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	220c      	movs	r2, #12
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d046      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>
 8002be6:	d848      	bhi.n	8002c7a <HAL_RCC_GetSysClockFreq+0xbe>
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d002      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d003      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x3c>
 8002bf0:	e043      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf2:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bf4:	613b      	str	r3, [r7, #16]
      break;
 8002bf6:	e043      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	4013      	ands	r3, r2
 8002c00:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	025b      	lsls	r3, r3, #9
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	481a      	ldr	r0, [pc, #104]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c28:	f7fd fa6e 	bl	8000108 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	001a      	movs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4353      	muls	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e01a      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	025b      	lsls	r3, r3, #9
 8002c3e:	401a      	ands	r2, r3
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	025b      	lsls	r3, r3, #9
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	4814      	ldr	r0, [pc, #80]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c4c:	f7fd fa5c 	bl	8000108 <__udivsi3>
 8002c50:	0003      	movs	r3, r0
 8002c52:	001a      	movs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4353      	muls	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	480c      	ldr	r0, [pc, #48]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c60:	f7fd fa52 	bl	8000108 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	001a      	movs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4353      	muls	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	613b      	str	r3, [r7, #16]
      break;
 8002c72:	e005      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	e002      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c7c:	613b      	str	r3, [r7, #16]
      break;
 8002c7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c80:	693b      	ldr	r3, [r7, #16]
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b006      	add	sp, #24
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	007a1200 	.word	0x007a1200
 8002c94:	0800325c 	.word	0x0800325c
 8002c98:	0800326c 	.word	0x0800326c
 8002c9c:	02dc6c00 	.word	0x02dc6c00

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d100      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002cbc:	e08e      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2017      	movs	r0, #23
 8002cc0:	183b      	adds	r3, r7, r0
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	055b      	lsls	r3, r3, #21
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d110      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	0549      	lsls	r1, r1, #21
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	055b      	lsls	r3, r3, #21
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d11a      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	0049      	lsls	r1, r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe f897 	bl	8000e40 <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	e008      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe f892 	bl	8000e40 <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0a6      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d36:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d38:	6a1a      	ldr	r2, [r3, #32]
 8002d3a:	23c0      	movs	r3, #192	; 0xc0
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d034      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	23c0      	movs	r3, #192	; 0xc0
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d02c      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	0249      	lsls	r1, r1, #9
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	4b42      	ldr	r3, [pc, #264]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d76:	4945      	ldr	r1, [pc, #276]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f859 	bl	8000e40 <HAL_GetTick>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	e009      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe f854 	bl	8000e40 <HAL_GetTick>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e067      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	2202      	movs	r2, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db2:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a34      	ldr	r2, [pc, #208]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	0019      	movs	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc6:	2317      	movs	r3, #23
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dd6:	492f      	ldr	r1, [pc, #188]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	2203      	movs	r2, #3
 8002dec:	4393      	bics	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002df6:	430a      	orrs	r2, r1
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	2210      	movs	r2, #16
 8002e28:	4393      	bics	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	4393      	bics	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	2240      	movs	r2, #64	; 0x40
 8002e68:	4393      	bics	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e72:	430a      	orrs	r2, r1
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b006      	add	sp, #24
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	fffffcff 	.word	0xfffffcff
 8002e8c:	fffeffff 	.word	0xfffeffff
 8002e90:	00001388 	.word	0x00001388
 8002e94:	efffffff 	.word	0xefffffff
 8002e98:	fffcffff 	.word	0xfffcffff

08002e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0a8      	b.n	8003000 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	2382      	movs	r3, #130	; 0x82
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d009      	beq.n	8002ed6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	61da      	str	r2, [r3, #28]
 8002ec8:	e005      	b.n	8002ed6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	225d      	movs	r2, #93	; 0x5d
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	225c      	movs	r2, #92	; 0x5c
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7fd fdea 	bl	8000acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	225d      	movs	r2, #93	; 0x5d
 8002efc:	2102      	movs	r1, #2
 8002efe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2140      	movs	r1, #64	; 0x40
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	23e0      	movs	r3, #224	; 0xe0
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e002      	b.n	8002f28 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	015b      	lsls	r3, r3, #5
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	23f0      	movs	r3, #240	; 0xf0
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d008      	beq.n	8002f46 <HAL_SPI_Init+0xaa>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	23e0      	movs	r3, #224	; 0xe0
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	2382      	movs	r3, #130	; 0x82
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	2384      	movs	r3, #132	; 0x84
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	400b      	ands	r3, r1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2102      	movs	r1, #2
 8002f62:	400b      	ands	r3, r1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6999      	ldr	r1, [r3, #24]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	400b      	ands	r3, r1
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2138      	movs	r1, #56	; 0x38
 8002f82:	400b      	ands	r3, r1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	0011      	movs	r1, r2
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	2204      	movs	r2, #4
 8002fac:	401a      	ands	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68d9      	ldr	r1, [r3, #12]
 8002fc6:	23f0      	movs	r3, #240	; 0xf0
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	400b      	ands	r3, r1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	0011      	movs	r1, r2
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4907      	ldr	r1, [pc, #28]	; (8003008 <HAL_SPI_Init+0x16c>)
 8002fec:	400a      	ands	r2, r1
 8002fee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	225d      	movs	r2, #93	; 0x5d
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b004      	add	sp, #16
 8003006:	bd80      	pop	{r7, pc}
 8003008:	fffff7ff 	.word	0xfffff7ff

0800300c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e074      	b.n	8003108 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	223c      	movs	r2, #60	; 0x3c
 8003022:	5c9b      	ldrb	r3, [r3, r2]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223d      	movs	r2, #61	; 0x3d
 800302e:	2100      	movs	r1, #0
 8003030:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f7fd fd97 	bl	8000b68 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	223c      	movs	r2, #60	; 0x3c
 800303e:	2102      	movs	r1, #2
 8003040:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003058:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003060:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003066:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800306c:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8003072:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003078:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800307e:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7b1b      	ldrb	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d108      	bne.n	80030a2 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	0249      	lsls	r1, r1, #9
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	43d2      	mvns	r2, r2
 80030b8:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d2:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681c      	ldr	r4, [r3, #0]
 80030dc:	0010      	movs	r0, r2
 80030de:	f000 f817 	bl	8003110 <TSC_extract_groups>
 80030e2:	0003      	movs	r3, r0
 80030e4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2103      	movs	r1, #3
 80030f2:	438a      	bics	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2203      	movs	r2, #3
 80030fc:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	223c      	movs	r2, #60	; 0x3c
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b003      	add	sp, #12
 800310e:	bd90      	pop	{r4, r7, pc}

08003110 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	e011      	b.n	8003146 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	409a      	lsls	r2, r3
 800312a:	0013      	movs	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4013      	ands	r3, r2
 8003130:	d006      	beq.n	8003140 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8003132:	2201      	movs	r2, #1
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3301      	adds	r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b07      	cmp	r3, #7
 800314a:	d9ea      	bls.n	8003122 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b004      	add	sp, #16
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <USB_DisableGlobalInt+0x30>)
 8003162:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	5a9b      	ldrh	r3, [r3, r2]
 800316a:	b29b      	uxth	r3, r3
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	b292      	uxth	r2, r2
 8003170:	43d2      	mvns	r2, r2
 8003172:	b292      	uxth	r2, r2
 8003174:	4013      	ands	r3, r2
 8003176:	b299      	uxth	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b004      	add	sp, #16
 8003186:	bd80      	pop	{r7, pc}
 8003188:	0000bf80 	.word	0x0000bf80

0800318c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800318c:	b084      	sub	sp, #16
 800318e:	b590      	push	{r4, r7, lr}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	2004      	movs	r0, #4
 8003198:	2410      	movs	r4, #16
 800319a:	1900      	adds	r0, r0, r4
 800319c:	2408      	movs	r4, #8
 800319e:	46a4      	mov	ip, r4
 80031a0:	44bc      	add	ip, r7
 80031a2:	4460      	add	r0, ip
 80031a4:	6001      	str	r1, [r0, #0]
 80031a6:	6042      	str	r2, [r0, #4]
 80031a8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	2101      	movs	r1, #1
 80031b0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	2100      	movs	r1, #0
 80031b8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2244      	movs	r2, #68	; 0x44
 80031be:	2100      	movs	r1, #0
 80031c0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2250      	movs	r2, #80	; 0x50
 80031c6:	2100      	movs	r1, #0
 80031c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b003      	add	sp, #12
 80031d2:	bc90      	pop	{r4, r7}
 80031d4:	bc08      	pop	{r3}
 80031d6:	b004      	add	sp, #16
 80031d8:	4718      	bx	r3

080031da <memset>:
 80031da:	0003      	movs	r3, r0
 80031dc:	1882      	adds	r2, r0, r2
 80031de:	4293      	cmp	r3, r2
 80031e0:	d100      	bne.n	80031e4 <memset+0xa>
 80031e2:	4770      	bx	lr
 80031e4:	7019      	strb	r1, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	e7f9      	b.n	80031de <memset+0x4>
	...

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2600      	movs	r6, #0
 80031f0:	4c0c      	ldr	r4, [pc, #48]	; (8003224 <__libc_init_array+0x38>)
 80031f2:	4d0d      	ldr	r5, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	2600      	movs	r6, #0
 80031fe:	f000 f819 	bl	8003234 <_init>
 8003202:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x40>)
 8003204:	4d0a      	ldr	r5, [pc, #40]	; (8003230 <__libc_init_array+0x44>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	00b3      	lsls	r3, r6, #2
 8003212:	58eb      	ldr	r3, [r5, r3]
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	00b3      	lsls	r3, r6, #2
 800321c:	58eb      	ldr	r3, [r5, r3]
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	0800327c 	.word	0x0800327c
 8003228:	0800327c 	.word	0x0800327c
 800322c:	08003284 	.word	0x08003284
 8003230:	0800327c 	.word	0x0800327c

08003234 <_init>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

08003240 <_fini>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr
