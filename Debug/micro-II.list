
micro-II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e70  08002e70  00003e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb0  08002eb0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb0  08002eb0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002eb0  08002eb0  00003eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb8  08002eb8  00003eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ebc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000000c  08002ec8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08002ec8  000044d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee78  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e0  00000000  00000000  00012eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00015890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac0  00000000  00000000  00016690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d41  00000000  00000000  00017150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c17  00000000  00000000  0001ae91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c0d  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c36b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003164  00000000  00000000  000c36f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000c685c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e58 	.word	0x08002e58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e58 	.word	0x08002e58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <_ZN4BaseC1Ev>:

#define getTick() HAL_GetTick() // change include and this hal funtion to use this class on other micros.

class Base {
public:
    Base() : intervalMs_(0), elapsedTime_(0)
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
    {
        startTime_ = getTick(); // Using getTick() to get the initial time
 8000234:	f000 fe26 	bl	8000e84 <HAL_GetTick>
 8000238:	0002      	movs	r2, r0
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
    }
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0018      	movs	r0, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}

08000248 <main>:
Base BASE05;

uint16_t adcteste;

int main()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	mainInit();
 800024c:	f000 f914 	bl	8000478 <mainInit>
	ADC_Init();
 8000250:	f000 f804 	bl	800025c <_Z8ADC_Initv>

	while(true)
	{
		adc_teste();
 8000254:	f000 f894 	bl	8000380 <_Z9adc_testev>
 8000258:	e7fc      	b.n	8000254 <main+0xc>
	...

0800025c <_Z8ADC_Initv>:
	  (void)BASE5.start(5000);
	  (void)BASE05.start(500);
}

// Function to initialize the ADC at the register level
void ADC_Init() {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000260:	4b32      	ldr	r3, [pc, #200]	@ (800032c <_Z8ADC_Initv+0xd0>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	4b31      	ldr	r3, [pc, #196]	@ (800032c <_Z8ADC_Initv+0xd0>)
 8000266:	2180      	movs	r1, #128	@ 0x80
 8000268:	0289      	lsls	r1, r1, #10
 800026a:	430a      	orrs	r2, r1
 800026c:	615a      	str	r2, [r3, #20]

    // Configure PA1 as an analog input
    // Set the MODER bits for PA1 to 11 (analog mode)
    GPIOA->MODER |= (0x3 << (1 * 2));
 800026e:	2390      	movs	r3, #144	@ 0x90
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	2390      	movs	r3, #144	@ 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	210c      	movs	r1, #12
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]

    // Disable pull-up and pull-down resistors for PA1
    // Set the PUPDR bits for PA1 to 00 (no pull-up or pull-down)
    GPIOA->PUPDR &= ~(0x3 << (1 * 2));
 800027e:	2390      	movs	r3, #144	@ 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	2390      	movs	r3, #144	@ 0x90
 8000286:	05db      	lsls	r3, r3, #23
 8000288:	210c      	movs	r1, #12
 800028a:	438a      	bics	r2, r1
 800028c:	60da      	str	r2, [r3, #12]

    // Enable the clock for ADC
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800028e:	4b27      	ldr	r3, [pc, #156]	@ (800032c <_Z8ADC_Initv+0xd0>)
 8000290:	699a      	ldr	r2, [r3, #24]
 8000292:	4b26      	ldr	r3, [pc, #152]	@ (800032c <_Z8ADC_Initv+0xd0>)
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0089      	lsls	r1, r1, #2
 8000298:	430a      	orrs	r2, r1
 800029a:	619a      	str	r2, [r3, #24]

    // Configure ADC resolution and data alignment

    // Clear the RES[1:0] bits in the ADC_CFGR1 register
    ADC1->CFGR1 &= ~(0x3 << 3);
 800029c:	4b24      	ldr	r3, [pc, #144]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	4b23      	ldr	r3, [pc, #140]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002a2:	2118      	movs	r1, #24
 80002a4:	438a      	bics	r2, r1
 80002a6:	60da      	str	r2, [r3, #12]

    // Set the RES[1:0] bits to 00 (12-bit resolution)
    ADC1->CFGR1 |= (0x0 << 3);
 80002a8:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002aa:	4b21      	ldr	r3, [pc, #132]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002ac:	68d2      	ldr	r2, [r2, #12]
 80002ae:	60da      	str	r2, [r3, #12]

    // Configure ADC channel sequence and sampling time
    ADC1->CHSELR = ADC_CHSELR_CHSEL1; // Select channel 1 (pin A1)
 80002b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	629a      	str	r2, [r3, #40]	@ 0x28
    ADC1->SMPR &= ~ADC_SMPR_SMP; // Clear sample time bits
 80002b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002b8:	695a      	ldr	r2, [r3, #20]
 80002ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002bc:	2107      	movs	r1, #7
 80002be:	438a      	bics	r2, r1
 80002c0:	615a      	str	r2, [r3, #20]

    // Set the SMP[2:0] bits to 111 for 239.5 ADC clock cycles sampling time
    ADC1->SMPR |= (0x7);
 80002c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002c8:	2107      	movs	r1, #7
 80002ca:	430a      	orrs	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]

    // Calibrate the ADC
    ADC1->CR &= ~ADC_CR_ADEN; // Ensure ADC is disabled
 80002ce:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002d0:	689a      	ldr	r2, [r3, #8]
 80002d2:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002d4:	2101      	movs	r1, #1
 80002d6:	438a      	bics	r2, r1
 80002d8:	609a      	str	r2, [r3, #8]
    ADC1->CR |= ADC_CR_ADCAL; // Start calibration
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002dc:	689a      	ldr	r2, [r3, #8]
 80002de:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002e0:	2180      	movs	r1, #128	@ 0x80
 80002e2:	0609      	lsls	r1, r1, #24
 80002e4:	430a      	orrs	r2, r1
 80002e6:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to complete
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	0fdb      	lsrs	r3, r3, #31
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d1f9      	bne.n	80002ea <_Z8ADC_Initv+0x8e>

    // Enable continuous conversion mode
    ADC1->CFGR1 |= ADC_CFGR1_CONT; // Set the CONT bit to enable continuous conversion mode
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002f8:	68da      	ldr	r2, [r3, #12]
 80002fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 80002fc:	2180      	movs	r1, #128	@ 0x80
 80002fe:	0189      	lsls	r1, r1, #6
 8000300:	430a      	orrs	r2, r1
 8000302:	60da      	str	r2, [r3, #12]

    // Enable the ADC
    ADC1->CR |= ADC_CR_ADEN; // Enable the ADC
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 8000306:	689a      	ldr	r2, [r3, #8]
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 800030a:	2101      	movs	r1, #1
 800030c:	430a      	orrs	r2, r1
 800030e:	609a      	str	r2, [r3, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait for ADC to be ready
 8000310:	46c0      	nop			@ (mov r8, r8)
 8000312:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <_Z8ADC_Initv+0xd4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2201      	movs	r2, #1
 8000318:	4013      	ands	r3, r2
 800031a:	425a      	negs	r2, r3
 800031c:	4153      	adcs	r3, r2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d1f6      	bne.n	8000312 <_Z8ADC_Initv+0xb6>
}
 8000324:	46c0      	nop			@ (mov r8, r8)
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40021000 	.word	0x40021000
 8000330:	40012400 	.word	0x40012400

08000334 <_Z8Read_ADCv>:

// Function to read ADC value from pin A1
uint16_t Read_ADC() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR |= ADC_CR_ADSTART;
 800033a:	4b10      	ldr	r3, [pc, #64]	@ (800037c <_Z8Read_ADCv+0x48>)
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <_Z8Read_ADCv+0x48>)
 8000340:	2104      	movs	r1, #4
 8000342:	430a      	orrs	r2, r1
 8000344:	609a      	str	r2, [r3, #8]

    // Wait for conversion to complete
    while (!(ADC1->ISR & ADC_ISR_EOC));
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <_Z8Read_ADCv+0x48>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2204      	movs	r2, #4
 800034e:	4013      	ands	r3, r2
 8000350:	425a      	negs	r2, r3
 8000352:	4153      	adcs	r3, r2
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f6      	bne.n	8000348 <_Z8Read_ADCv+0x14>

    // Read ADC value
    uint16_t adc_value = ADC1->DR;
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <_Z8Read_ADCv+0x48>)
 800035c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800035e:	1dbb      	adds	r3, r7, #6
 8000360:	801a      	strh	r2, [r3, #0]

    // Clear end of conversion flag
    ADC1->ISR &= ~ADC_ISR_EOC;
 8000362:	4b06      	ldr	r3, [pc, #24]	@ (800037c <_Z8Read_ADCv+0x48>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <_Z8Read_ADCv+0x48>)
 8000368:	2104      	movs	r1, #4
 800036a:	438a      	bics	r2, r1
 800036c:	601a      	str	r2, [r3, #0]

    return adc_value;
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	881b      	ldrh	r3, [r3, #0]
}
 8000372:	0018      	movs	r0, r3
 8000374:	46bd      	mov	sp, r7
 8000376:	b002      	add	sp, #8
 8000378:	bd80      	pop	{r7, pc}
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	40012400 	.word	0x40012400

08000380 <_Z9adc_testev>:

void adc_teste()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
//	GPIOC->MODER &= ~(3 << (2 * 7)); // Clear mode bits for pin 7
//	GPIOC->MODER |= (1 << (2 * 7)); // Set pin 7 as output mode
//	GPIOC->ODR |= (1 << 7); // Set pin 7 to high

	// Read ADC value from pin A1
	adcteste = Read_ADC();
 8000386:	f7ff ffd5 	bl	8000334 <_Z8Read_ADCv>
 800038a:	0003      	movs	r3, r0
 800038c:	001a      	movs	r2, r3
 800038e:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <_Z9adc_testev+0x7c>)
 8000390:	801a      	strh	r2, [r3, #0]

	// Define the ADC value thresholds for LEDs
	uint16_t thresholds[] = {1000, 2000, 3000, 4000};
 8000392:	230c      	movs	r3, #12
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <_Z9adc_testev+0x80>)
 8000398:	ca03      	ldmia	r2!, {r0, r1}
 800039a:	c303      	stmia	r3!, {r0, r1}
	uint16_t pins[] = {LD3_Pin, LD4_Pin, LD5_Pin, LD6_Pin};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4a19      	ldr	r2, [pc, #100]	@ (8000404 <_Z9adc_testev+0x84>)
 80003a0:	ca03      	ldmia	r2!, {r0, r1}
 80003a2:	c303      	stmia	r3!, {r0, r1}

	// Iterate through the thresholds and set/reset the LEDs
	for (int i = 0; i < 4; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	e01e      	b.n	80003e8 <_Z9adc_testev+0x68>
		if (adcteste > thresholds[i]) {
 80003aa:	230c      	movs	r3, #12
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	0052      	lsls	r2, r2, #1
 80003b2:	5ad2      	ldrh	r2, [r2, r3]
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <_Z9adc_testev+0x7c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d209      	bcs.n	80003d0 <_Z9adc_testev+0x50>
			HAL_GPIO_WritePin(GPIOC, pins[i], GPIO_PIN_SET);
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	697a      	ldr	r2, [r7, #20]
 80003c0:	0052      	lsls	r2, r2, #1
 80003c2:	5ad3      	ldrh	r3, [r2, r3]
 80003c4:	4810      	ldr	r0, [pc, #64]	@ (8000408 <_Z9adc_testev+0x88>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	0019      	movs	r1, r3
 80003ca:	f001 fb33 	bl	8001a34 <HAL_GPIO_WritePin>
 80003ce:	e008      	b.n	80003e2 <_Z9adc_testev+0x62>
		} else {
			HAL_GPIO_WritePin(GPIOC, pins[i], GPIO_PIN_RESET);
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	697a      	ldr	r2, [r7, #20]
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	5ad3      	ldrh	r3, [r2, r3]
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <_Z9adc_testev+0x88>)
 80003da:	2200      	movs	r2, #0
 80003dc:	0019      	movs	r1, r3
 80003de:	f001 fb29 	bl	8001a34 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3301      	adds	r3, #1
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	2b03      	cmp	r3, #3
 80003ec:	dddd      	ble.n	80003aa <_Z9adc_testev+0x2a>
		}
	}

	// Add a small delay for stability (you can adjust the delay as needed)
	HAL_Delay(100);
 80003ee:	2064      	movs	r0, #100	@ 0x64
 80003f0:	f000 fd52 	bl	8000e98 <HAL_Delay>
}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b006      	add	sp, #24
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000058 	.word	0x20000058
 8000400:	08002e70 	.word	0x08002e70
 8000404:	08002e78 	.word	0x08002e78
 8000408:	48000800 	.word	0x48000800

0800040c <_Z41__static_initialization_and_destruction_0ii>:
    }
}

void app_loop()
{
}
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d113      	bne.n	8000444 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	4a0b      	ldr	r2, [pc, #44]	@ (800044c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d10f      	bne.n	8000444 <_Z41__static_initialization_and_destruction_0ii+0x38>
Base BASE1;
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000426:	0018      	movs	r0, r3
 8000428:	f7ff fefa 	bl	8000220 <_ZN4BaseC1Ev>
Base BASE2;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff fef6 	bl	8000220 <_ZN4BaseC1Ev>
Base BASE5;
 8000434:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff fef2 	bl	8000220 <_ZN4BaseC1Ev>
Base BASE05;
 800043c:	4b07      	ldr	r3, [pc, #28]	@ (800045c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800043e:	0018      	movs	r0, r3
 8000440:	f7ff feee 	bl	8000220 <_ZN4BaseC1Ev>
}
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}
 800044c:	0000ffff 	.word	0x0000ffff
 8000450:	20000028 	.word	0x20000028
 8000454:	20000034 	.word	0x20000034
 8000458:	20000040 	.word	0x20000040
 800045c:	2000004c 	.word	0x2000004c

08000460 <_GLOBAL__sub_I_BASE1>:
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
 8000464:	4b03      	ldr	r3, [pc, #12]	@ (8000474 <_GLOBAL__sub_I_BASE1+0x14>)
 8000466:	0019      	movs	r1, r3
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff ffcf 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	0000ffff 	.word	0x0000ffff

08000478 <mainInit>:
int main(void)
{
  /* USER CODE BEGIN 1 */
#endif
void mainInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f000 fca8 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f811 	bl	80004a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f000 f9dc 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000488:	f000 f9bc 	bl	8000804 <MX_DMA_Init>
  MX_I2C2_Init();
 800048c:	f000 f8d2 	bl	8000634 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000490:	f000 f910 	bl	80006b4 <MX_SPI2_Init>
  MX_TSC_Init();
 8000494:	f000 f94c 	bl	8000730 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000498:	f000 f98e 	bl	80007b8 <MX_USB_PCD_Init>
  MX_ADC_Init();
 800049c:	f000 f870 	bl	8000580 <MX_ADC_Init>

    /* USER CODE BEGIN 3 */
  }
#endif
  /* USER CODE END 3 */
}
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a6:	b590      	push	{r4, r7, lr}
 80004a8:	b099      	sub	sp, #100	@ 0x64
 80004aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ac:	242c      	movs	r4, #44	@ 0x2c
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	0018      	movs	r0, r3
 80004b2:	2334      	movs	r3, #52	@ 0x34
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f002 fca1 	bl	8002dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	231c      	movs	r3, #28
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	0018      	movs	r0, r3
 80004c2:	2310      	movs	r3, #16
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f002 fc99 	bl	8002dfe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	003b      	movs	r3, r7
 80004ce:	0018      	movs	r0, r3
 80004d0:	231c      	movs	r3, #28
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f002 fc92 	bl	8002dfe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80004da:	0021      	movs	r1, r4
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2232      	movs	r2, #50	@ 0x32
 80004e0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2201      	movs	r2, #1
 80004e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2210      	movs	r2, #16
 80004f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2210      	movs	r2, #16
 80004fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2202      	movs	r2, #2
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	0212      	lsls	r2, r2, #8
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2280      	movs	r2, #128	@ 0x80
 8000512:	0352      	lsls	r2, r2, #13
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	187b      	adds	r3, r7, r1
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fcfe 	bl	8001f20 <HAL_RCC_OscConfig>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000528:	f000 fa06 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	211c      	movs	r1, #28
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2207      	movs	r2, #7
 8000532:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2202      	movs	r2, #2
 8000538:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2101      	movs	r1, #1
 800054a:	0018      	movs	r0, r3
 800054c:	f002 f86e 	bl	800262c <HAL_RCC_ClockConfig>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000554:	f000 f9f0 	bl	8000938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000558:	003b      	movs	r3, r7
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	0292      	lsls	r2, r2, #10
 800055e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	f002 f9ab 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000572:	f000 f9e1 	bl	8000938 <Error_Handler>
  }
}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b019      	add	sp, #100	@ 0x64
 800057c:	bd90      	pop	{r4, r7, pc}
	...

08000580 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	0018      	movs	r0, r3
 800058a:	230c      	movs	r3, #12
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fc35 	bl	8002dfe <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <MX_ADC_Init+0xac>)
 8000596:	4a26      	ldr	r2, [pc, #152]	@ (8000630 <MX_ADC_Init+0xb0>)
 8000598:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059a:	4b24      	ldr	r3, [pc, #144]	@ (800062c <MX_ADC_Init+0xac>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b22      	ldr	r3, [pc, #136]	@ (800062c <MX_ADC_Init+0xac>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <MX_ADC_Init+0xac>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <MX_ADC_Init+0xac>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <MX_ADC_Init+0xac>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <MX_ADC_Init+0xac>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005be:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <MX_ADC_Init+0xac>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <MX_ADC_Init+0xac>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b18      	ldr	r3, [pc, #96]	@ (800062c <MX_ADC_Init+0xac>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b16      	ldr	r3, [pc, #88]	@ (800062c <MX_ADC_Init+0xac>)
 80005d2:	22c2      	movs	r2, #194	@ 0xc2
 80005d4:	32ff      	adds	r2, #255	@ 0xff
 80005d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_ADC_Init+0xac>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_ADC_Init+0xac>)
 80005e0:	2224      	movs	r2, #36	@ 0x24
 80005e2:	2101      	movs	r1, #1
 80005e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_ADC_Init+0xac>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_ADC_Init+0xac>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fc76 	bl	8000ee0 <HAL_ADC_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80005f8:	f000 f99e 	bl	8000938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2280      	movs	r2, #128	@ 0x80
 8000606:	0152      	lsls	r2, r2, #5
 8000608:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2207      	movs	r2, #7
 800060e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_ADC_Init+0xac>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fda2 	bl	8001160 <HAL_ADC_ConfigChannel>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000620:	f000 f98a 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b004      	add	sp, #16
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000005c 	.word	0x2000005c
 8000630:	40012400 	.word	0x40012400

08000634 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_I2C2_Init+0x74>)
 800063a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ac <MX_I2C2_Init+0x78>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000640:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <MX_I2C2_Init+0x7c>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_I2C2_Init+0x74>)
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000656:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2C2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_I2C2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000670:	0018      	movs	r0, r3
 8000672:	f001 f9fd 	bl	8001a70 <HAL_I2C_Init>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800067a:	f000 f95d 	bl	8000938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000680:	2100      	movs	r1, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fa8a 	bl	8001b9c <HAL_I2CEx_ConfigAnalogFilter>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800068c:	f000 f954 	bl	8000938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <MX_I2C2_Init+0x74>)
 8000692:	2100      	movs	r1, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f001 facd 	bl	8001c34 <HAL_I2CEx_ConfigDigitalFilter>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 f94b 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000e0 	.word	0x200000e0
 80006ac:	40005800 	.word	0x40005800
 80006b0:	20303e5d 	.word	0x20303e5d

080006b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	@ (800072c <MX_SPI2_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006c0:	2282      	movs	r2, #130	@ 0x82
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006ce:	22c0      	movs	r2, #192	@ 0xc0
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006ea:	2208      	movs	r2, #8
 80006ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_SPI2_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_SPI2_Init+0x74>)
 8000702:	2207      	movs	r2, #7
 8000704:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_SPI2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_SPI2_Init+0x74>)
 800070e:	2208      	movs	r2, #8
 8000710:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <MX_SPI2_Init+0x74>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 f9d3 	bl	8002ac0 <HAL_SPI_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f90b 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000134 	.word	0x20000134
 800072c:	40003800 	.word	0x40003800

08000730 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <MX_TSC_Init+0x84>)
 8000738:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_TSC_Init+0x80>)
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	0552      	lsls	r2, r2, #21
 8000740:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	0452      	lsls	r2, r2, #17
 8000748:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_TSC_Init+0x80>)
 800074c:	2200      	movs	r2, #0
 800074e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000752:	2201      	movs	r2, #1
 8000754:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_TSC_Init+0x80>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	0192      	lsls	r2, r2, #6
 8000762:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000766:	22a0      	movs	r2, #160	@ 0xa0
 8000768:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_TSC_Init+0x80>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_TSC_Init+0x80>)
 800077e:	222c      	movs	r2, #44	@ 0x2c
 8000780:	2100      	movs	r1, #0
 8000782:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000786:	2291      	movs	r2, #145	@ 0x91
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_TSC_Init+0x80>)
 800078e:	2200      	movs	r2, #0
 8000790:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 8000792:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_TSC_Init+0x80>)
 8000794:	2291      	movs	r2, #145	@ 0x91
 8000796:	00d2      	lsls	r2, r2, #3
 8000798:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800079a:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <MX_TSC_Init+0x80>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fa47 	bl	8002c30 <HAL_TSC_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80007a6:	f000 f8c7 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000198 	.word	0x20000198
 80007b4:	40024000 	.word	0x40024000

080007b8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <MX_USB_PCD_Init+0x48>)
 80007c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007c4:	2208      	movs	r2, #8
 80007c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <MX_USB_PCD_Init+0x44>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fa6f 	bl	8001ccc <HAL_PCD_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80007f2:	f000 f8a1 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001dc 	.word	0x200001dc
 8000800:	40005c00 	.word	0x40005c00

08000804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_DMA_Init+0x38>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_DMA_Init+0x38>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_DMA_Init+0x38>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2009      	movs	r0, #9
 8000828:	f000 fe54 	bl	80014d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800082c:	2009      	movs	r0, #9
 800082e:	f000 fe66 	bl	80014fe <HAL_NVIC_EnableIRQ>

}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	40021000 	.word	0x40021000

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b089      	sub	sp, #36	@ 0x24
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	240c      	movs	r4, #12
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2314      	movs	r3, #20
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f002 fad4 	bl	8002dfe <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b35      	ldr	r3, [pc, #212]	@ (800092c <MX_GPIO_Init+0xec>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b34      	ldr	r3, [pc, #208]	@ (800092c <MX_GPIO_Init+0xec>)
 800085c:	2180      	movs	r1, #128	@ 0x80
 800085e:	0309      	lsls	r1, r1, #12
 8000860:	430a      	orrs	r2, r1
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_GPIO_Init+0xec>)
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	031b      	lsls	r3, r3, #12
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_GPIO_Init+0xec>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_GPIO_Init+0xec>)
 8000878:	2180      	movs	r1, #128	@ 0x80
 800087a:	0289      	lsls	r1, r1, #10
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_GPIO_Init+0xec>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	029b      	lsls	r3, r3, #10
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_GPIO_Init+0xec>)
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_GPIO_Init+0xec>)
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	02c9      	lsls	r1, r1, #11
 8000898:	430a      	orrs	r2, r1
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_GPIO_Init+0xec>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	02db      	lsls	r3, r3, #11
 80008a4:	4013      	ands	r3, r2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80008aa:	4921      	ldr	r1, [pc, #132]	@ (8000930 <MX_GPIO_Init+0xf0>)
 80008ac:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_GPIO_Init+0xf4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 f8bf 	bl	8001a34 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <MX_GPIO_Init+0xf0>)
 80008ba:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2201      	movs	r2, #1
 80008c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <MX_GPIO_Init+0xf4>)
 80008d2:	0019      	movs	r1, r3
 80008d4:	0010      	movs	r0, r2
 80008d6:	f000 ff35 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80008da:	0021      	movs	r1, r4
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2206      	movs	r2, #6
 80008e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2290      	movs	r2, #144	@ 0x90
 80008e6:	0352      	lsls	r2, r2, #13
 80008e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	000c      	movs	r4, r1
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000934 <MX_GPIO_Init+0xf4>)
 80008f6:	0019      	movs	r1, r3
 80008f8:	0010      	movs	r0, r2
 80008fa:	f000 ff23 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2290      	movs	r2, #144	@ 0x90
 800090a:	0352      	lsls	r2, r2, #13
 800090c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	187a      	adds	r2, r7, r1
 8000916:	2390      	movs	r3, #144	@ 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 ff11 	bl	8001744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b009      	add	sp, #36	@ 0x24
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	40021000 	.word	0x40021000
 8000930:	000003e1 	.word	0x000003e1
 8000934:	48000800 	.word	0x48000800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x44>)
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <HAL_MspInit+0x44>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_MspInit+0x44>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_MspInit+0x44>)
 8000964:	69da      	ldr	r2, [r3, #28]
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_MspInit+0x44>)
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	0549      	lsls	r1, r1, #21
 800096c:	430a      	orrs	r2, r1
 800096e:	61da      	str	r2, [r3, #28]
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_MspInit+0x44>)
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	4013      	ands	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b08b      	sub	sp, #44	@ 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2414      	movs	r4, #20
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f002 fa2d 	bl	8002dfe <memset>
  if(hadc->Instance==ADC1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <HAL_ADC_MspInit+0xd4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d153      	bne.n	8000a56 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	0089      	lsls	r1, r1, #2
 80009b8:	430a      	orrs	r2, r1
 80009ba:	619a      	str	r2, [r3, #24]
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009be:	699a      	ldr	r2, [r3, #24]
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009cc:	695a      	ldr	r2, [r3, #20]
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0289      	lsls	r1, r1, #10
 80009d4:	430a      	orrs	r2, r1
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <HAL_ADC_MspInit+0xd8>)
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	029b      	lsls	r3, r3, #10
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2203      	movs	r2, #3
 80009f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	193a      	adds	r2, r7, r4
 80009fa:	2390      	movs	r3, #144	@ 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fe9f 	bl	8001744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a08:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_ADC_MspInit+0xe0>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	00d2      	lsls	r2, r2, #3
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a30:	2220      	movs	r2, #32
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fd7b 	bl	8001538 <HAL_DMA_Init>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000a46:	f7ff ff77 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_ADC_MspInit+0xdc>)
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b00b      	add	sp, #44	@ 0x2c
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40012400 	.word	0x40012400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	40020008 	.word	0x40020008

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08b      	sub	sp, #44	@ 0x2c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	2414      	movs	r4, #20
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2314      	movs	r3, #20
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f002 f9bb 	bl	8002dfe <memset>
  if(hi2c->Instance==I2C2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <HAL_I2C_MspInit+0x90>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d132      	bne.n	8000af8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <HAL_I2C_MspInit+0x94>)
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <HAL_I2C_MspInit+0x94>)
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	02c9      	lsls	r1, r1, #11
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_I2C_MspInit+0x94>)
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	02db      	lsls	r3, r3, #11
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	22c0      	movs	r2, #192	@ 0xc0
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab6:	0021      	movs	r1, r4
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2212      	movs	r2, #18
 8000abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2201      	movs	r2, #1
 8000ace:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_I2C_MspInit+0x98>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f000 fe34 	bl	8001744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_I2C_MspInit+0x94>)
 8000ade:	69da      	ldr	r2, [r3, #28]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_I2C_MspInit+0x94>)
 8000ae2:	2180      	movs	r1, #128	@ 0x80
 8000ae4:	03c9      	lsls	r1, r1, #15
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	61da      	str	r2, [r3, #28]
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_I2C_MspInit+0x94>)
 8000aec:	69da      	ldr	r2, [r3, #28]
 8000aee:	2380      	movs	r3, #128	@ 0x80
 8000af0:	03db      	lsls	r3, r3, #15
 8000af2:	4013      	ands	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b00b      	add	sp, #44	@ 0x2c
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40005800 	.word	0x40005800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000400 	.word	0x48000400

08000b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08b      	sub	sp, #44	@ 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	2414      	movs	r4, #20
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f002 f96d 	bl	8002dfe <memset>
  if(hspi->Instance==SPI2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <HAL_SPI_MspInit+0x90>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d132      	bne.n	8000b94 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <HAL_SPI_MspInit+0x94>)
 8000b30:	69da      	ldr	r2, [r3, #28]
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <HAL_SPI_MspInit+0x94>)
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	01c9      	lsls	r1, r1, #7
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	61da      	str	r2, [r3, #28]
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_SPI_MspInit+0x94>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	01db      	lsls	r3, r3, #7
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_SPI_MspInit+0x94>)
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_SPI_MspInit+0x94>)
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	02c9      	lsls	r1, r1, #11
 8000b54:	430a      	orrs	r2, r1
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_SPI_MspInit+0x94>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	02db      	lsls	r3, r3, #11
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	22e0      	movs	r2, #224	@ 0xe0
 8000b6a:	0212      	lsls	r2, r2, #8
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2202      	movs	r2, #2
 8000b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <HAL_SPI_MspInit+0x98>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f000 fdd8 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b00b      	add	sp, #44	@ 0x2c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40003800 	.word	0x40003800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	@ 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	2414      	movs	r4, #20
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f002 f91f 	bl	8002dfe <memset>
  if(htsc->Instance==TSC)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a44      	ldr	r2, [pc, #272]	@ (8000cd8 <HAL_TSC_MspInit+0x130>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d000      	beq.n	8000bcc <HAL_TSC_MspInit+0x24>
 8000bca:	e080      	b.n	8000cce <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000bcc:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	4b42      	ldr	r3, [pc, #264]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	0449      	lsls	r1, r1, #17
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	045b      	lsls	r3, r3, #17
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	0289      	lsls	r1, r1, #10
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	029b      	lsls	r3, r3, #10
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b35      	ldr	r3, [pc, #212]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000c06:	695a      	ldr	r2, [r3, #20]
 8000c08:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000c0a:	2180      	movs	r1, #128	@ 0x80
 8000c0c:	02c9      	lsls	r1, r1, #11
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	4b32      	ldr	r3, [pc, #200]	@ (8000cdc <HAL_TSC_MspInit+0x134>)
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	02db      	lsls	r3, r3, #11
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2244      	movs	r2, #68	@ 0x44
 8000c24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2202      	movs	r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	193a      	adds	r2, r7, r4
 8000c40:	2390      	movs	r3, #144	@ 0x90
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fd7c 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2288      	movs	r2, #136	@ 0x88
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2212      	movs	r2, #18
 8000c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	2203      	movs	r2, #3
 8000c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	193a      	adds	r2, r7, r4
 8000c6c:	2390      	movs	r3, #144	@ 0x90
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fd66 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2203      	movs	r2, #3
 8000c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <HAL_TSC_MspInit+0x138>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f000 fd51 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ca2:	0021      	movs	r1, r4
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2212      	movs	r2, #18
 8000cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <HAL_TSC_MspInit+0x138>)
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	0010      	movs	r0, r2
 8000cca:	f000 fd3b 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b00b      	add	sp, #44	@ 0x2c
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	40024000 	.word	0x40024000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_PCD_MspInit+0x38>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_PCD_MspInit+0x3c>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_PCD_MspInit+0x3c>)
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	0409      	lsls	r1, r1, #16
 8000d00:	430a      	orrs	r2, r1
 8000d02:	61da      	str	r2, [r3, #28]
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_PCD_MspInit+0x3c>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	40005c00 	.word	0x40005c00
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f888 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <DMA1_Channel1_IRQHandler+0x14>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fc32 	bl	80015c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	2000009c 	.word	0x2000009c

08000d70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d7c:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d80:	f7ff fff6 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc8 <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000daa:	f002 f831 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff fa4b 	bl	8000248 <main>

08000db2 <LoopForever>:

LoopForever:
    b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   r0, =_estack
 8000db4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc0:	08002ebc 	.word	0x08002ebc
  ldr r2, =_sbss
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc8:	200004d4 	.word	0x200004d4

08000dcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_COMP_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <HAL_Init+0x24>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_Init+0x24>)
 8000dda:	2110      	movs	r1, #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f809 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de6:	f7ff fdad 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e02:	681c      	ldr	r4, [r3, #0]
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_InitTick+0x60>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	0019      	movs	r1, r3
 8000e0a:	23fa      	movs	r3, #250	@ 0xfa
 8000e0c:	0098      	lsls	r0, r3, #2
 8000e0e:	f7ff f97b 	bl	8000108 <__udivsi3>
 8000e12:	0003      	movs	r3, r0
 8000e14:	0019      	movs	r1, r3
 8000e16:	0020      	movs	r0, r4
 8000e18:	f7ff f976 	bl	8000108 <__udivsi3>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 fb7d 	bl	800151e <HAL_SYSTICK_Config>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e00f      	b.n	8000e4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d80b      	bhi.n	8000e4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fb4a 	bl	80014d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_InitTick+0x64>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b003      	add	sp, #12
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	18d2      	adds	r2, r2, r3
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200004d0 	.word	0x200004d0

08000e84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	200004d0 	.word	0x200004d0

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff fff0 	bl	8000e84 <HAL_GetTick>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	189b      	adds	r3, r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	f7ff ffe0 	bl	8000e84 <HAL_GetTick>
 8000ec4:	0002      	movs	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b004      	add	sp, #16
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e125      	b.n	800114a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10a      	bne.n	8000f1c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2234      	movs	r2, #52	@ 0x34
 8000f10:	2100      	movs	r1, #0
 8000f12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fd38 	bl	800098c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f20:	2210      	movs	r2, #16
 8000f22:	4013      	ands	r3, r2
 8000f24:	d000      	beq.n	8000f28 <HAL_ADC_Init+0x48>
 8000f26:	e103      	b.n	8001130 <HAL_ADC_Init+0x250>
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d000      	beq.n	8000f34 <HAL_ADC_Init+0x54>
 8000f32:	e0fd      	b.n	8001130 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f3e:	d000      	beq.n	8000f42 <HAL_ADC_Init+0x62>
 8000f40:	e0f6      	b.n	8001130 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f46:	4a83      	ldr	r2, [pc, #524]	@ (8001154 <HAL_ADC_Init+0x274>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d112      	bne.n	8000f86 <HAL_ADC_Init+0xa6>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d009      	beq.n	8000f82 <HAL_ADC_Init+0xa2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	401a      	ands	r2, r3
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Init+0xa6>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_ADC_Init+0xa8>
 8000f86:	2300      	movs	r3, #0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d116      	bne.n	8000fba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2218      	movs	r2, #24
 8000f94:	4393      	bics	r3, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	0899      	lsrs	r1, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4964      	ldr	r1, [pc, #400]	@ (8001158 <HAL_ADC_Init+0x278>)
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7e1b      	ldrb	r3, [r3, #24]
 8000fce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7e5b      	ldrb	r3, [r3, #25]
 8000fd4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7e9b      	ldrb	r3, [r3, #26]
 8000fdc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fde:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d002      	beq.n	8000fee <HAL_ADC_Init+0x10e>
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	e000      	b.n	8000ff0 <HAL_ADC_Init+0x110>
 8000fee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ff0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ff6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_Init+0x124>
 8001000:	2304      	movs	r3, #4
 8001002:	e000      	b.n	8001006 <HAL_ADC_Init+0x126>
 8001004:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001006:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2124      	movs	r1, #36	@ 0x24
 800100c:	5c5b      	ldrb	r3, [r3, r1]
 800100e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001010:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	4313      	orrs	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7edb      	ldrb	r3, [r3, #27]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d115      	bne.n	800104c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7e9b      	ldrb	r3, [r3, #26]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	0252      	lsls	r2, r2, #9
 800102e:	4313      	orrs	r3, r2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	e00b      	b.n	800104c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001038:	2220      	movs	r2, #32
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001044:	2201      	movs	r2, #1
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69da      	ldr	r2, [r3, #28]
 8001050:	23c2      	movs	r3, #194	@ 0xc2
 8001052:	33ff      	adds	r3, #255	@ 0xff
 8001054:	429a      	cmp	r2, r3
 8001056:	d007      	beq.n	8001068 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001060:	4313      	orrs	r3, r2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4313      	orrs	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68d9      	ldr	r1, [r3, #12]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	430a      	orrs	r2, r1
 8001076:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	055b      	lsls	r3, r3, #21
 8001080:	429a      	cmp	r2, r3
 8001082:	d01b      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d017      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001090:	2b02      	cmp	r3, #2
 8001092:	d013      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001098:	2b03      	cmp	r3, #3
 800109a:	d00f      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d00b      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d007      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b0:	2b06      	cmp	r3, #6
 80010b2:	d003      	beq.n	80010bc <HAL_ADC_Init+0x1dc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d112      	bne.n	80010e2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2107      	movs	r1, #7
 80010c8:	438a      	bics	r2, r1
 80010ca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6959      	ldr	r1, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d6:	2207      	movs	r2, #7
 80010d8:	401a      	ands	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <HAL_ADC_Init+0x27c>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d10b      	bne.n	800110a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fc:	2203      	movs	r2, #3
 80010fe:	4393      	bics	r3, r2
 8001100:	2201      	movs	r2, #1
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001108:	e01c      	b.n	8001144 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110e:	2212      	movs	r2, #18
 8001110:	4393      	bics	r3, r2
 8001112:	2210      	movs	r2, #16
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800111e:	2201      	movs	r2, #1
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800112e:	e009      	b.n	8001144 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001134:	2210      	movs	r2, #16
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800113c:	230f      	movs	r3, #15
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	fffffefd 	.word	0xfffffefd
 8001158:	fffe0219 	.word	0xfffe0219
 800115c:	833fffe7 	.word	0x833fffe7

08001160 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116a:	230f      	movs	r3, #15
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	055b      	lsls	r3, r3, #21
 800117e:	429a      	cmp	r2, r3
 8001180:	d011      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x46>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001186:	2b01      	cmp	r3, #1
 8001188:	d00d      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x46>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800118e:	2b02      	cmp	r3, #2
 8001190:	d009      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x46>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001196:	2b03      	cmp	r3, #3
 8001198:	d005      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x46>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d001      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x46>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2234      	movs	r2, #52	@ 0x34
 80011aa:	5c9b      	ldrb	r3, [r3, r2]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x54>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e0d0      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1f6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2234      	movs	r2, #52	@ 0x34
 80011b8:	2101      	movs	r1, #1
 80011ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2204      	movs	r2, #4
 80011c4:	4013      	ands	r3, r2
 80011c6:	d000      	beq.n	80011ca <HAL_ADC_ConfigChannel+0x6a>
 80011c8:	e0b4      	b.n	8001334 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a64      	ldr	r2, [pc, #400]	@ (8001360 <HAL_ADC_ConfigChannel+0x200>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d100      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x76>
 80011d4:	e082      	b.n	80012dc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2201      	movs	r2, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	055b      	lsls	r3, r3, #21
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d037      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d033      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	2b02      	cmp	r3, #2
 8001206:	d02f      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120c:	2b03      	cmp	r3, #3
 800120e:	d02b      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	2b04      	cmp	r3, #4
 8001216:	d027      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121c:	2b05      	cmp	r3, #5
 800121e:	d023      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	2b06      	cmp	r3, #6
 8001226:	d01f      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	2b07      	cmp	r3, #7
 800122e:	d01b      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2107      	movs	r1, #7
 800123c:	400b      	ands	r3, r1
 800123e:	429a      	cmp	r2, r3
 8001240:	d012      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2107      	movs	r1, #7
 800124e:	438a      	bics	r2, r1
 8001250:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6959      	ldr	r1, [r3, #20]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2207      	movs	r2, #7
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d007      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x120>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b11      	cmp	r3, #17
 8001276:	d003      	beq.n	8001280 <HAL_ADC_ConfigChannel+0x120>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b12      	cmp	r3, #18
 800127e:	d163      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001280:	4b38      	ldr	r3, [pc, #224]	@ (8001364 <HAL_ADC_ConfigChannel+0x204>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b10      	cmp	r3, #16
 800128a:	d009      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0x140>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b11      	cmp	r3, #17
 8001292:	d102      	bne.n	800129a <HAL_ADC_ConfigChannel+0x13a>
 8001294:	2380      	movs	r3, #128	@ 0x80
 8001296:	03db      	lsls	r3, r3, #15
 8001298:	e004      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x144>
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	045b      	lsls	r3, r3, #17
 800129e:	e001      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x144>
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	041b      	lsls	r3, r3, #16
 80012a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001364 <HAL_ADC_ConfigChannel+0x204>)
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d14a      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <HAL_ADC_ConfigChannel+0x208>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	492d      	ldr	r1, [pc, #180]	@ (800136c <HAL_ADC_ConfigChannel+0x20c>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7fe ff25 	bl	8000108 <__udivsi3>
 80012be:	0003      	movs	r3, r0
 80012c0:	001a      	movs	r2, r3
 80012c2:	0013      	movs	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012cc:	e002      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x16e>
 80012da:	e035      	b.n	8001348 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2101      	movs	r1, #1
 80012e8:	4099      	lsls	r1, r3
 80012ea:	000b      	movs	r3, r1
 80012ec:	43d9      	mvns	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d007      	beq.n	800130e <HAL_ADC_ConfigChannel+0x1ae>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b11      	cmp	r3, #17
 8001304:	d003      	beq.n	800130e <HAL_ADC_ConfigChannel+0x1ae>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b12      	cmp	r3, #18
 800130c:	d11c      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_ADC_ConfigChannel+0x204>)
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d007      	beq.n	800132a <HAL_ADC_ConfigChannel+0x1ca>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b11      	cmp	r3, #17
 8001320:	d101      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x1c6>
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_ADC_ConfigChannel+0x210>)
 8001324:	e002      	b.n	800132c <HAL_ADC_ConfigChannel+0x1cc>
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_ADC_ConfigChannel+0x214>)
 8001328:	e000      	b.n	800132c <HAL_ADC_ConfigChannel+0x1cc>
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <HAL_ADC_ConfigChannel+0x218>)
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <HAL_ADC_ConfigChannel+0x204>)
 800132e:	400b      	ands	r3, r1
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e009      	b.n	8001348 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001338:	2220      	movs	r2, #32
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2234      	movs	r2, #52	@ 0x34
 800134c:	2100      	movs	r1, #0
 800134e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001350:	230f      	movs	r3, #15
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	00001001 	.word	0x00001001
 8001364:	40012708 	.word	0x40012708
 8001368:	20000000 	.word	0x20000000
 800136c:	000f4240 	.word	0x000f4240
 8001370:	ffbfffff 	.word	0xffbfffff
 8001374:	feffffff 	.word	0xfeffffff
 8001378:	ff7fffff 	.word	0xff7fffff

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b7f      	cmp	r3, #127	@ 0x7f
 800138e:	d809      	bhi.n	80013a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	231f      	movs	r3, #31
 8001398:	401a      	ands	r2, r3
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_EnableIRQ+0x30>)
 800139c:	2101      	movs	r1, #1
 800139e:	4091      	lsls	r1, r2
 80013a0:	000a      	movs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
  }
}
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013c4:	d828      	bhi.n	8001418 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <__NVIC_SetPriority+0xd4>)
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	33c0      	adds	r3, #192	@ 0xc0
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	589b      	ldr	r3, [r3, r2]
 80013d6:	1dfa      	adds	r2, r7, #7
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	0011      	movs	r1, r2
 80013dc:	2203      	movs	r2, #3
 80013de:	400a      	ands	r2, r1
 80013e0:	00d2      	lsls	r2, r2, #3
 80013e2:	21ff      	movs	r1, #255	@ 0xff
 80013e4:	4091      	lsls	r1, r2
 80013e6:	000a      	movs	r2, r1
 80013e8:	43d2      	mvns	r2, r2
 80013ea:	401a      	ands	r2, r3
 80013ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	22ff      	movs	r2, #255	@ 0xff
 80013f4:	401a      	ands	r2, r3
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	0018      	movs	r0, r3
 80013fc:	2303      	movs	r3, #3
 80013fe:	4003      	ands	r3, r0
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001404:	481f      	ldr	r0, [pc, #124]	@ (8001484 <__NVIC_SetPriority+0xd4>)
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25b      	sxtb	r3, r3
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	430a      	orrs	r2, r1
 8001410:	33c0      	adds	r3, #192	@ 0xc0
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001416:	e031      	b.n	800147c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <__NVIC_SetPriority+0xd8>)
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	0019      	movs	r1, r3
 8001420:	230f      	movs	r3, #15
 8001422:	400b      	ands	r3, r1
 8001424:	3b08      	subs	r3, #8
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3306      	adds	r3, #6
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	1dfa      	adds	r2, r7, #7
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	0011      	movs	r1, r2
 8001438:	2203      	movs	r2, #3
 800143a:	400a      	ands	r2, r1
 800143c:	00d2      	lsls	r2, r2, #3
 800143e:	21ff      	movs	r1, #255	@ 0xff
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	43d2      	mvns	r2, r2
 8001446:	401a      	ands	r2, r3
 8001448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	22ff      	movs	r2, #255	@ 0xff
 8001450:	401a      	ands	r2, r3
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	0018      	movs	r0, r3
 8001458:	2303      	movs	r3, #3
 800145a:	4003      	ands	r3, r0
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <__NVIC_SetPriority+0xd8>)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	001c      	movs	r4, r3
 8001468:	230f      	movs	r3, #15
 800146a:	4023      	ands	r3, r4
 800146c:	3b08      	subs	r3, #8
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	430a      	orrs	r2, r1
 8001472:	3306      	adds	r3, #6
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	18c3      	adds	r3, r0, r3
 8001478:	3304      	adds	r3, #4
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b003      	add	sp, #12
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	045b      	lsls	r3, r3, #17
 800149c:	429a      	cmp	r2, r3
 800149e:	d301      	bcc.n	80014a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a0:	2301      	movs	r3, #1
 80014a2:	e010      	b.n	80014c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <SysTick_Config+0x44>)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	3a01      	subs	r2, #1
 80014aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ac:	2301      	movs	r3, #1
 80014ae:	425b      	negs	r3, r3
 80014b0:	2103      	movs	r1, #3
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff7c 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <SysTick_Config+0x44>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <SysTick_Config+0x44>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	210f      	movs	r1, #15
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	0002      	movs	r2, r0
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff33 	bl	800137c <__NVIC_EnableIRQ>
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ffaf 	bl	800148c <SysTick_Config>
 800152e:	0003      	movs	r3, r0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e036      	b.n	80015bc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2221      	movs	r2, #33	@ 0x21
 8001552:	2102      	movs	r1, #2
 8001554:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_DMA_Init+0x8c>)
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800156e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 f8b4 	bl	800170c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2221      	movs	r2, #33	@ 0x21
 80015ae:	2101      	movs	r1, #1
 80015b0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2220      	movs	r2, #32
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	ffffc00f 	.word	0xffffc00f

080015c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	2204      	movs	r2, #4
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	d024      	beq.n	800163a <HAL_DMA_IRQHandler+0x72>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2204      	movs	r2, #4
 80015f4:	4013      	ands	r3, r2
 80015f6:	d020      	beq.n	800163a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	4013      	ands	r3, r2
 8001602:	d107      	bne.n	8001614 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2104      	movs	r1, #4
 8001610:	438a      	bics	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800161c:	2104      	movs	r1, #4
 800161e:	4091      	lsls	r1, r2
 8001620:	000a      	movs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d100      	bne.n	800162e <HAL_DMA_IRQHandler+0x66>
 800162c:	e06a      	b.n	8001704 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	0010      	movs	r0, r2
 8001636:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001638:	e064      	b.n	8001704 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2202      	movs	r2, #2
 8001640:	409a      	lsls	r2, r3
 8001642:	0013      	movs	r3, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	d02b      	beq.n	80016a2 <HAL_DMA_IRQHandler+0xda>
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d027      	beq.n	80016a2 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2220      	movs	r2, #32
 800165a:	4013      	ands	r3, r2
 800165c:	d10b      	bne.n	8001676 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	210a      	movs	r1, #10
 800166a:	438a      	bics	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2221      	movs	r2, #33	@ 0x21
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167e:	2102      	movs	r1, #2
 8001680:	4091      	lsls	r1, r2
 8001682:	000a      	movs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001692:	2b00      	cmp	r3, #0
 8001694:	d036      	beq.n	8001704 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	0010      	movs	r0, r2
 800169e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016a0:	e030      	b.n	8001704 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	2208      	movs	r2, #8
 80016a8:	409a      	lsls	r2, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	d028      	beq.n	8001704 <HAL_DMA_IRQHandler+0x13c>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4013      	ands	r3, r2
 80016b8:	d024      	beq.n	8001704 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	210e      	movs	r1, #14
 80016c6:	438a      	bics	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d2:	2101      	movs	r1, #1
 80016d4:	4091      	lsls	r1, r2
 80016d6:	000a      	movs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2221      	movs	r2, #33	@ 0x21
 80016e4:	2101      	movs	r1, #1
 80016e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	2100      	movs	r1, #0
 80016ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	0010      	movs	r0, r2
 8001700:	4798      	blx	r3
    }
  }
}
 8001702:	e7ff      	b.n	8001704 <HAL_DMA_IRQHandler+0x13c>
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}

0800170c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a08      	ldr	r2, [pc, #32]	@ (800173c <DMA_CalcBaseAndBitshift+0x30>)
 800171a:	4694      	mov	ip, r2
 800171c:	4463      	add	r3, ip
 800171e:	2114      	movs	r1, #20
 8001720:	0018      	movs	r0, r3
 8001722:	f7fe fcf1 	bl	8000108 <__udivsi3>
 8001726:	0003      	movs	r3, r0
 8001728:	009a      	lsls	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a03      	ldr	r2, [pc, #12]	@ (8001740 <DMA_CalcBaseAndBitshift+0x34>)
 8001732:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}
 800173c:	bffdfff8 	.word	0xbffdfff8
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e155      	b.n	8001a00 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d100      	bne.n	800176c <HAL_GPIO_Init+0x28>
 800176a:	e146      	b.n	80019fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2203      	movs	r2, #3
 8001772:	4013      	ands	r3, r2
 8001774:	2b01      	cmp	r3, #1
 8001776:	d005      	beq.n	8001784 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001780:	2b02      	cmp	r3, #2
 8001782:	d130      	bne.n	80017e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ba:	2201      	movs	r2, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	2201      	movs	r2, #1
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d017      	beq.n	8001822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	4013      	ands	r3, r2
 800182a:	2b02      	cmp	r3, #2
 800182c:	d123      	bne.n	8001876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	08da      	lsrs	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3208      	adds	r2, #8
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	58d3      	ldr	r3, [r2, r3]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2207      	movs	r2, #7
 8001840:	4013      	ands	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	43da      	mvns	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2107      	movs	r1, #7
 800185a:	400b      	ands	r3, r1
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	6939      	ldr	r1, [r7, #16]
 8001874:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	401a      	ands	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	23c0      	movs	r3, #192	@ 0xc0
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	4013      	ands	r3, r2
 80018b4:	d100      	bne.n	80018b8 <HAL_GPIO_Init+0x174>
 80018b6:	e0a0      	b.n	80019fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b8:	4b57      	ldr	r3, [pc, #348]	@ (8001a18 <HAL_GPIO_Init+0x2d4>)
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	4b56      	ldr	r3, [pc, #344]	@ (8001a18 <HAL_GPIO_Init+0x2d4>)
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	4b54      	ldr	r3, [pc, #336]	@ (8001a18 <HAL_GPIO_Init+0x2d4>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d0:	4a52      	ldr	r2, [pc, #328]	@ (8001a1c <HAL_GPIO_Init+0x2d8>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	589b      	ldr	r3, [r3, r2]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	409a      	lsls	r2, r3
 80018ea:	0013      	movs	r3, r2
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	2390      	movs	r3, #144	@ 0x90
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x1ee>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a47      	ldr	r2, [pc, #284]	@ (8001a20 <HAL_GPIO_Init+0x2dc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x1ea>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a46      	ldr	r2, [pc, #280]	@ (8001a24 <HAL_GPIO_Init+0x2e0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x1e6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a45      	ldr	r2, [pc, #276]	@ (8001a28 <HAL_GPIO_Init+0x2e4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x1e2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a44      	ldr	r2, [pc, #272]	@ (8001a2c <HAL_GPIO_Init+0x2e8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x1de>
 800191e:	2304      	movs	r3, #4
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x1f0>
 8001922:	2305      	movs	r3, #5
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x1f0>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x1f0>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x1f0>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x1f0>
 8001932:	2300      	movs	r3, #0
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	2103      	movs	r1, #3
 8001938:	400a      	ands	r2, r1
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001944:	4935      	ldr	r1, [pc, #212]	@ (8001a1c <HAL_GPIO_Init+0x2d8>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001952:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43da      	mvns	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	035b      	lsls	r3, r3, #13
 800196a:	4013      	ands	r3, r2
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800197c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43da      	mvns	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	039b      	lsls	r3, r3, #14
 8001994:	4013      	ands	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	029b      	lsls	r3, r3, #10
 80019be:	4013      	ands	r3, r2
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43da      	mvns	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	4013      	ands	r3, r2
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	40da      	lsrs	r2, r3
 8001a08:	1e13      	subs	r3, r2, #0
 8001a0a:	d000      	beq.n	8001a0e <HAL_GPIO_Init+0x2ca>
 8001a0c:	e6a2      	b.n	8001754 <HAL_GPIO_Init+0x10>
  } 
}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	46c0      	nop			@ (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b006      	add	sp, #24
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	48000400 	.word	0x48000400
 8001a24:	48000800 	.word	0x48000800
 8001a28:	48000c00 	.word	0x48000c00
 8001a2c:	48001000 	.word	0x48001000
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	0008      	movs	r0, r1
 8001a3e:	0011      	movs	r1, r2
 8001a40:	1cbb      	adds	r3, r7, #2
 8001a42:	1c02      	adds	r2, r0, #0
 8001a44:	801a      	strh	r2, [r3, #0]
 8001a46:	1c7b      	adds	r3, r7, #1
 8001a48:	1c0a      	adds	r2, r1, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	1c7b      	adds	r3, r7, #1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5e:	1cbb      	adds	r3, r7, #2
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e082      	b.n	8001b88 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2241      	movs	r2, #65	@ 0x41
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2240      	movs	r2, #64	@ 0x40
 8001a92:	2100      	movs	r1, #0
 8001a94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7fe ffe9 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2241      	movs	r2, #65	@ 0x41
 8001aa2:	2124      	movs	r1, #36	@ 0x24
 8001aa4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4934      	ldr	r1, [pc, #208]	@ (8001b90 <HAL_I2C_Init+0x120>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4931      	ldr	r1, [pc, #196]	@ (8001b94 <HAL_I2C_Init+0x124>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0209      	lsls	r1, r1, #8
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e007      	b.n	8001afe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2184      	movs	r1, #132	@ 0x84
 8001af8:	0209      	lsls	r1, r1, #8
 8001afa:	430a      	orrs	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d104      	bne.n	8001b10 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2280      	movs	r2, #128	@ 0x80
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	491f      	ldr	r1, [pc, #124]	@ (8001b98 <HAL_I2C_Init+0x128>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	491a      	ldr	r1, [pc, #104]	@ (8001b94 <HAL_I2C_Init+0x124>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69d9      	ldr	r1, [r3, #28]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2241      	movs	r2, #65	@ 0x41
 8001b74:	2120      	movs	r1, #32
 8001b76:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2242      	movs	r2, #66	@ 0x42
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	f0ffffff 	.word	0xf0ffffff
 8001b94:	ffff7fff 	.word	0xffff7fff
 8001b98:	02008000 	.word	0x02008000

08001b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	@ 0x41
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d138      	bne.n	8001c24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2240      	movs	r2, #64	@ 0x40
 8001bb6:	5c9b      	ldrb	r3, [r3, r2]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e032      	b.n	8001c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2240      	movs	r2, #64	@ 0x40
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2241      	movs	r2, #65	@ 0x41
 8001bcc:	2124      	movs	r1, #36	@ 0x24
 8001bce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2101      	movs	r1, #1
 8001bdc:	438a      	bics	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4911      	ldr	r1, [pc, #68]	@ (8001c30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2241      	movs	r2, #65	@ 0x41
 8001c14:	2120      	movs	r1, #32
 8001c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	ffffefff 	.word	0xffffefff

08001c34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2241      	movs	r2, #65	@ 0x41
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d139      	bne.n	8001cbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2240      	movs	r2, #64	@ 0x40
 8001c4e:	5c9b      	ldrb	r3, [r3, r2]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e033      	b.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2240      	movs	r2, #64	@ 0x40
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2241      	movs	r2, #65	@ 0x41
 8001c64:	2124      	movs	r1, #36	@ 0x24
 8001c66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2101      	movs	r1, #1
 8001c74:	438a      	bics	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a11      	ldr	r2, [pc, #68]	@ (8001cc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2241      	movs	r2, #65	@ 0x41
 8001cae:	2120      	movs	r1, #32
 8001cb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2240      	movs	r2, #64	@ 0x40
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	fffff0ff 	.word	0xfffff0ff

08001ccc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	b08b      	sub	sp, #44	@ 0x2c
 8001cd0:	af06      	add	r7, sp, #24
 8001cd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0f0      	b.n	8001ec0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a79      	ldr	r2, [pc, #484]	@ (8001ec8 <HAL_PCD_Init+0x1fc>)
 8001ce2:	5c9b      	ldrb	r3, [r3, r2]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	23aa      	movs	r3, #170	@ 0xaa
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe fff4 	bl	8000ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a72      	ldr	r2, [pc, #456]	@ (8001ec8 <HAL_PCD_Init+0x1fc>)
 8001d00:	2103      	movs	r1, #3
 8001d02:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f001 f837 	bl	8002d7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e049      	b.n	8001dac <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d18:	200f      	movs	r0, #15
 8001d1a:	183b      	adds	r3, r7, r0
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	0013      	movs	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	189b      	adds	r3, r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	18cb      	adds	r3, r1, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	183a      	adds	r2, r7, r0
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	0013      	movs	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	189b      	adds	r3, r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	18cb      	adds	r3, r1, r3
 8001d5a:	3303      	adds	r3, #3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	0013      	movs	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	18cb      	adds	r3, r1, r3
 8001d70:	3338      	adds	r3, #56	@ 0x38
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	189b      	adds	r3, r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	18cb      	adds	r3, r1, r3
 8001d86:	333c      	adds	r3, #60	@ 0x3c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8c:	183b      	adds	r3, r7, r0
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	0013      	movs	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	18cb      	adds	r3, r1, r3
 8001d9c:	3340      	adds	r3, #64	@ 0x40
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	3201      	adds	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	210f      	movs	r1, #15
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3ae      	bcc.n	8001d18 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e056      	b.n	8001e70 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dc2:	240f      	movs	r4, #15
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	236a      	movs	r3, #106	@ 0x6a
 8001dcc:	33ff      	adds	r3, #255	@ 0xff
 8001dce:	0019      	movs	r1, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	189b      	adds	r3, r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	18c3      	adds	r3, r0, r3
 8001dda:	185b      	adds	r3, r3, r1
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	23b4      	movs	r3, #180	@ 0xb4
 8001de8:	0059      	lsls	r1, r3, #1
 8001dea:	0013      	movs	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	189b      	adds	r3, r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	18c3      	adds	r3, r0, r3
 8001df4:	185b      	adds	r3, r3, r1
 8001df6:	193a      	adds	r2, r7, r4
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfc:	193b      	adds	r3, r7, r4
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	236c      	movs	r3, #108	@ 0x6c
 8001e04:	33ff      	adds	r3, #255	@ 0xff
 8001e06:	0019      	movs	r1, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	189b      	adds	r3, r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	18c3      	adds	r3, r0, r3
 8001e12:	185b      	adds	r3, r3, r1
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	23bc      	movs	r3, #188	@ 0xbc
 8001e20:	0059      	lsls	r1, r3, #1
 8001e22:	0013      	movs	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	189b      	adds	r3, r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	18c3      	adds	r3, r0, r3
 8001e2c:	185b      	adds	r3, r3, r1
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	23be      	movs	r3, #190	@ 0xbe
 8001e3a:	0059      	lsls	r1, r3, #1
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	18c3      	adds	r3, r0, r3
 8001e46:	185b      	adds	r3, r3, r1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e4c:	193b      	adds	r3, r7, r4
 8001e4e:	781a      	ldrb	r2, [r3, #0]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	23c0      	movs	r3, #192	@ 0xc0
 8001e54:	0059      	lsls	r1, r3, #1
 8001e56:	0013      	movs	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	18c3      	adds	r3, r0, r3
 8001e60:	185b      	adds	r3, r3, r1
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	3201      	adds	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	230f      	movs	r3, #15
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d3a1      	bcc.n	8001dc2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	466a      	mov	r2, sp
 8001e86:	0011      	movs	r1, r2
 8001e88:	001a      	movs	r2, r3
 8001e8a:	3210      	adds	r2, #16
 8001e8c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001e8e:	c170      	stmia	r1!, {r4, r5, r6}
 8001e90:	ca30      	ldmia	r2!, {r4, r5}
 8001e92:	c130      	stmia	r1!, {r4, r5}
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f000 ff89 	bl	8002db0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2224      	movs	r2, #36	@ 0x24
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_PCD_Init+0x1fc>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d103      	bne.n	8001ebe <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f807 	bl	8001ecc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b005      	add	sp, #20
 8001ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec8:	000002a9 	.word	0x000002a9

08001ecc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	23ba      	movs	r3, #186	@ 0xba
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	23b8      	movs	r3, #184	@ 0xb8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	2100      	movs	r1, #0
 8001eec:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2254      	movs	r2, #84	@ 0x54
 8001ef2:	5a9b      	ldrh	r3, [r3, r2]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b299      	uxth	r1, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2254      	movs	r2, #84	@ 0x54
 8001f00:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2254      	movs	r2, #84	@ 0x54
 8001f06:	5a9b      	ldrh	r3, [r3, r2]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b299      	uxth	r1, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2254      	movs	r2, #84	@ 0x54
 8001f14:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f000 fb76 	bl	8002620 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d100      	bne.n	8001f40 <HAL_RCC_OscConfig+0x20>
 8001f3e:	e08e      	b.n	800205e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f40:	4bc5      	ldr	r3, [pc, #788]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	220c      	movs	r2, #12
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d00e      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4c:	4bc2      	ldr	r3, [pc, #776]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	220c      	movs	r2, #12
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d117      	bne.n	8001f88 <HAL_RCC_OscConfig+0x68>
 8001f58:	4bbf      	ldr	r3, [pc, #764]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	23c0      	movs	r3, #192	@ 0xc0
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	401a      	ands	r2, r3
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d10e      	bne.n	8001f88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6a:	4bbb      	ldr	r3, [pc, #748]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	029b      	lsls	r3, r3, #10
 8001f72:	4013      	ands	r3, r2
 8001f74:	d100      	bne.n	8001f78 <HAL_RCC_OscConfig+0x58>
 8001f76:	e071      	b.n	800205c <HAL_RCC_OscConfig+0x13c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d000      	beq.n	8001f82 <HAL_RCC_OscConfig+0x62>
 8001f80:	e06c      	b.n	800205c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f000 fb4c 	bl	8002620 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x80>
 8001f90:	4bb1      	ldr	r3, [pc, #708]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4bb0      	ldr	r3, [pc, #704]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001f96:	2180      	movs	r1, #128	@ 0x80
 8001f98:	0249      	lsls	r1, r1, #9
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e02f      	b.n	8002000 <HAL_RCC_OscConfig+0xe0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xa2>
 8001fa8:	4bab      	ldr	r3, [pc, #684]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4baa      	ldr	r3, [pc, #680]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fae:	49ab      	ldr	r1, [pc, #684]	@ (800225c <HAL_RCC_OscConfig+0x33c>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4ba7      	ldr	r3, [pc, #668]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fba:	49a9      	ldr	r1, [pc, #676]	@ (8002260 <HAL_RCC_OscConfig+0x340>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e01e      	b.n	8002000 <HAL_RCC_OscConfig+0xe0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xc8>
 8001fca:	4ba3      	ldr	r3, [pc, #652]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4ba2      	ldr	r3, [pc, #648]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fd0:	2180      	movs	r1, #128	@ 0x80
 8001fd2:	02c9      	lsls	r1, r1, #11
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b9f      	ldr	r3, [pc, #636]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b9e      	ldr	r3, [pc, #632]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	0249      	lsls	r1, r1, #9
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xe0>
 8001fe8:	4b9b      	ldr	r3, [pc, #620]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b9a      	ldr	r3, [pc, #616]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001fee:	499b      	ldr	r1, [pc, #620]	@ (800225c <HAL_RCC_OscConfig+0x33c>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	4b98      	ldr	r3, [pc, #608]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b97      	ldr	r3, [pc, #604]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	4999      	ldr	r1, [pc, #612]	@ (8002260 <HAL_RCC_OscConfig+0x340>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe ff3c 	bl	8000e84 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002012:	f7fe ff37 	bl	8000e84 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	@ 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2fd      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	4b8c      	ldr	r3, [pc, #560]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0xf2>
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe ff27 	bl	8000e84 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe ff22 	bl	8000e84 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e2e8      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x11c>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x14a>
 8002068:	e06c      	b.n	8002144 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800206a:	4b7b      	ldr	r3, [pc, #492]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	220c      	movs	r2, #12
 8002070:	4013      	ands	r3, r2
 8002072:	d00e      	beq.n	8002092 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002074:	4b78      	ldr	r3, [pc, #480]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	220c      	movs	r2, #12
 800207a:	4013      	ands	r3, r2
 800207c:	2b08      	cmp	r3, #8
 800207e:	d11f      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1a0>
 8002080:	4b75      	ldr	r3, [pc, #468]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	23c0      	movs	r3, #192	@ 0xc0
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	401a      	ands	r2, r3
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	429a      	cmp	r2, r3
 8002090:	d116      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	4b71      	ldr	r3, [pc, #452]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_OscConfig+0x188>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e2bb      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	22f8      	movs	r2, #248	@ 0xf8
 80020ae:	4393      	bics	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00da      	lsls	r2, r3, #3
 80020b8:	4b67      	ldr	r3, [pc, #412]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	e041      	b.n	8002144 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d024      	beq.n	8002112 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c8:	4b63      	ldr	r3, [pc, #396]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b62      	ldr	r3, [pc, #392]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fed6 	bl	8000e84 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fed1 	bl	8000e84 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e297      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b59      	ldr	r3, [pc, #356]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0f1      	beq.n	80020de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	22f8      	movs	r2, #248	@ 0xf8
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	00da      	lsls	r2, r3, #3
 800210a:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e018      	b.n	8002144 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b51      	ldr	r3, [pc, #324]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002118:	2101      	movs	r1, #1
 800211a:	438a      	bics	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe feb1 	bl	8000e84 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002128:	f7fe feac 	bl	8000e84 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e272      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	d1f1      	bne.n	8002128 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2208      	movs	r2, #8
 800214a:	4013      	ands	r3, r2
 800214c:	d036      	beq.n	80021bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800215a:	4b3f      	ldr	r3, [pc, #252]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe fe8f 	bl	8000e84 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fe8a 	bl	8000e84 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e250      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d0f1      	beq.n	800216c <HAL_RCC_OscConfig+0x24c>
 8002188:	e018      	b.n	80021bc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800218c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800218e:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 8002190:	2101      	movs	r1, #1
 8002192:	438a      	bics	r2, r1
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe fe75 	bl	8000e84 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fe70 	bl	8000e84 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e236      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	4b29      	ldr	r3, [pc, #164]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	d1f1      	bne.n	80021a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2204      	movs	r2, #4
 80021c2:	4013      	ands	r3, r2
 80021c4:	d100      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2a8>
 80021c6:	e0b5      	b.n	8002334 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c8:	201f      	movs	r0, #31
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	055b      	lsls	r3, r3, #21
 80021d8:	4013      	ands	r3, r2
 80021da:	d110      	bne.n	80021fe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80021e2:	2180      	movs	r1, #128	@ 0x80
 80021e4:	0549      	lsls	r1, r1, #21
 80021e6:	430a      	orrs	r2, r1
 80021e8:	61da      	str	r2, [r3, #28]
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	055b      	lsls	r3, r3, #21
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021f8:	183b      	adds	r3, r7, r0
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_OscConfig+0x344>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <HAL_RCC_OscConfig+0x344>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_RCC_OscConfig+0x344>)
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	0049      	lsls	r1, r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002218:	f7fe fe34 	bl	8000e84 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002222:	f7fe fe2f 	bl	8000e84 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b64      	cmp	r3, #100	@ 0x64
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1f5      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x344>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4013      	ands	r3, r2
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10f      	bne.n	8002268 <HAL_RCC_OscConfig+0x348>
 8002248:	4b03      	ldr	r3, [pc, #12]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <HAL_RCC_OscConfig+0x338>)
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	621a      	str	r2, [r3, #32]
 8002254:	e036      	b.n	80022c4 <HAL_RCC_OscConfig+0x3a4>
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	40021000 	.word	0x40021000
 800225c:	fffeffff 	.word	0xfffeffff
 8002260:	fffbffff 	.word	0xfffbffff
 8002264:	40007000 	.word	0x40007000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10c      	bne.n	800228a <HAL_RCC_OscConfig+0x36a>
 8002270:	4bca      	ldr	r3, [pc, #808]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	4bc9      	ldr	r3, [pc, #804]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	621a      	str	r2, [r3, #32]
 800227c:	4bc7      	ldr	r3, [pc, #796]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	4bc6      	ldr	r3, [pc, #792]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002282:	2104      	movs	r1, #4
 8002284:	438a      	bics	r2, r1
 8002286:	621a      	str	r2, [r3, #32]
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0x3a4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b05      	cmp	r3, #5
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x38c>
 8002292:	4bc2      	ldr	r3, [pc, #776]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002294:	6a1a      	ldr	r2, [r3, #32]
 8002296:	4bc1      	ldr	r3, [pc, #772]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002298:	2104      	movs	r1, #4
 800229a:	430a      	orrs	r2, r1
 800229c:	621a      	str	r2, [r3, #32]
 800229e:	4bbf      	ldr	r3, [pc, #764]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	4bbe      	ldr	r3, [pc, #760]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	621a      	str	r2, [r3, #32]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x3a4>
 80022ac:	4bbb      	ldr	r3, [pc, #748]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4bba      	ldr	r3, [pc, #744]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	621a      	str	r2, [r3, #32]
 80022b8:	4bb8      	ldr	r3, [pc, #736]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	4bb7      	ldr	r3, [pc, #732]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022be:	2104      	movs	r1, #4
 80022c0:	438a      	bics	r2, r1
 80022c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d014      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fdda 	bl	8000e84 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	e009      	b.n	80022ea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fdd5 	bl	8000e84 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	4aaf      	ldr	r2, [pc, #700]	@ (80025a0 <HAL_RCC_OscConfig+0x680>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e19a      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	4bac      	ldr	r3, [pc, #688]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x3b6>
 80022f4:	e013      	b.n	800231e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fdc5 	bl	8000e84 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fe:	e009      	b.n	8002314 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fdc0 	bl	8000e84 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	4aa5      	ldr	r2, [pc, #660]	@ (80025a0 <HAL_RCC_OscConfig+0x680>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e185      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	4ba1      	ldr	r3, [pc, #644]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	2202      	movs	r2, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800231e:	231f      	movs	r3, #31
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b9c      	ldr	r3, [pc, #624]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	4b9b      	ldr	r3, [pc, #620]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800232e:	499d      	ldr	r1, [pc, #628]	@ (80025a4 <HAL_RCC_OscConfig+0x684>)
 8002330:	400a      	ands	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	4013      	ands	r3, r2
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d12a      	bne.n	800239c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002346:	4b95      	ldr	r3, [pc, #596]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800234a:	4b94      	ldr	r3, [pc, #592]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800234c:	2104      	movs	r1, #4
 800234e:	430a      	orrs	r2, r1
 8002350:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002352:	4b92      	ldr	r3, [pc, #584]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002356:	4b91      	ldr	r3, [pc, #580]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002358:	2101      	movs	r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7fe fd91 	bl	8000e84 <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002368:	f7fe fd8c 	bl	8000e84 <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e152      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800237a:	4b88      	ldr	r3, [pc, #544]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800237c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002384:	4b85      	ldr	r3, [pc, #532]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002388:	22f8      	movs	r2, #248	@ 0xf8
 800238a:	4393      	bics	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	00da      	lsls	r2, r3, #3
 8002394:	4b81      	ldr	r3, [pc, #516]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002396:	430a      	orrs	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
 800239a:	e034      	b.n	8002406 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	3305      	adds	r3, #5
 80023a2:	d111      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023a4:	4b7d      	ldr	r3, [pc, #500]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023a8:	4b7c      	ldr	r3, [pc, #496]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023aa:	2104      	movs	r1, #4
 80023ac:	438a      	bics	r2, r1
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023b0:	4b7a      	ldr	r3, [pc, #488]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b4:	22f8      	movs	r2, #248	@ 0xf8
 80023b6:	4393      	bics	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	00da      	lsls	r2, r3, #3
 80023c0:	4b76      	ldr	r3, [pc, #472]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c6:	e01e      	b.n	8002406 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023c8:	4b74      	ldr	r3, [pc, #464]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023cc:	4b73      	ldr	r3, [pc, #460]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023ce:	2104      	movs	r1, #4
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023d4:	4b71      	ldr	r3, [pc, #452]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d8:	4b70      	ldr	r3, [pc, #448]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe fd50 	bl	8000e84 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023ea:	f7fe fd4b 	bl	8000e84 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e111      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023fc:	4b67      	ldr	r3, [pc, #412]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002400:	2202      	movs	r2, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d1f1      	bne.n	80023ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2220      	movs	r2, #32
 800240c:	4013      	ands	r3, r2
 800240e:	d05c      	beq.n	80024ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002410:	4b62      	ldr	r3, [pc, #392]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	220c      	movs	r2, #12
 8002416:	4013      	ands	r3, r2
 8002418:	2b0c      	cmp	r3, #12
 800241a:	d00e      	beq.n	800243a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800241c:	4b5f      	ldr	r3, [pc, #380]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	220c      	movs	r2, #12
 8002422:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002424:	2b08      	cmp	r3, #8
 8002426:	d114      	bne.n	8002452 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002428:	4b5c      	ldr	r3, [pc, #368]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	23c0      	movs	r3, #192	@ 0xc0
 800242e:	025b      	lsls	r3, r3, #9
 8002430:	401a      	ands	r2, r3
 8002432:	23c0      	movs	r3, #192	@ 0xc0
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	429a      	cmp	r2, r3
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800243a:	4b58      	ldr	r3, [pc, #352]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800243c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	029b      	lsls	r3, r3, #10
 8002442:	4013      	ands	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_OscConfig+0x5a8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d03c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0e6      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01b      	beq.n	8002492 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800245a:	4b50      	ldr	r3, [pc, #320]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800245c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245e:	4b4f      	ldr	r3, [pc, #316]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002460:	2180      	movs	r1, #128	@ 0x80
 8002462:	0249      	lsls	r1, r1, #9
 8002464:	430a      	orrs	r2, r1
 8002466:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fd0c 	bl	8000e84 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002472:	f7fe fd07 	bl	8000e84 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0cd      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002484:	4b45      	ldr	r3, [pc, #276]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	4013      	ands	r3, r2
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x552>
 8002490:	e01b      	b.n	80024ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002492:	4b42      	ldr	r3, [pc, #264]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002496:	4b41      	ldr	r3, [pc, #260]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002498:	4943      	ldr	r1, [pc, #268]	@ (80025a8 <HAL_RCC_OscConfig+0x688>)
 800249a:	400a      	ands	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fcf1 	bl	8000e84 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a8:	f7fe fcec 	bl	8000e84 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0b2      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80024bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	029b      	lsls	r3, r3, #10
 80024c2:	4013      	ands	r3, r2
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x588>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024c8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d100      	bne.n	80024d4 <HAL_RCC_OscConfig+0x5b4>
 80024d2:	e0a4      	b.n	800261e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	220c      	movs	r2, #12
 80024da:	4013      	ands	r3, r2
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d100      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5c2>
 80024e0:	e078      	b.n	80025d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d14c      	bne.n	8002584 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b2c      	ldr	r3, [pc, #176]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 80024f0:	492e      	ldr	r1, [pc, #184]	@ (80025ac <HAL_RCC_OscConfig+0x68c>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fcc5 	bl	8000e84 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe fcc0 	bl	8000e84 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e086      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	049b      	lsls	r3, r3, #18
 800251a:	4013      	ands	r3, r2
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251e:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	220f      	movs	r2, #15
 8002524:	4393      	bics	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002532:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a1e      	ldr	r2, [pc, #120]	@ (80025b0 <HAL_RCC_OscConfig+0x690>)
 8002538:	4013      	ands	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	431a      	orrs	r2, r3
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	0449      	lsls	r1, r1, #17
 8002556:	430a      	orrs	r2, r1
 8002558:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fc93 	bl	8000e84 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fc8e 	bl	8000e84 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e054      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	049b      	lsls	r3, r3, #18
 800257e:	4013      	ands	r3, r2
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x644>
 8002582:	e04c      	b.n	800261e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b04      	ldr	r3, [pc, #16]	@ (800259c <HAL_RCC_OscConfig+0x67c>)
 800258a:	4908      	ldr	r1, [pc, #32]	@ (80025ac <HAL_RCC_OscConfig+0x68c>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fc78 	bl	8000e84 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x6a6>
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	00001388 	.word	0x00001388
 80025a4:	efffffff 	.word	0xefffffff
 80025a8:	fffeffff 	.word	0xfffeffff
 80025ac:	feffffff 	.word	0xfeffffff
 80025b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fc66 	bl	8000e84 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e02c      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <HAL_RCC_OscConfig+0x708>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	049b      	lsls	r3, r3, #18
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x694>
 80025d2:	e024      	b.n	800261e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e01f      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_RCC_OscConfig+0x708>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <HAL_RCC_OscConfig+0x708>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	23c0      	movs	r3, #192	@ 0xc0
 80025f0:	025b      	lsls	r3, r3, #9
 80025f2:	401a      	ands	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10e      	bne.n	800261a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	220f      	movs	r2, #15
 8002600:	401a      	ands	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d107      	bne.n	800261a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	23f0      	movs	r3, #240	@ 0xf0
 800260e:	039b      	lsls	r3, r3, #14
 8002610:	401a      	ands	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b008      	add	sp, #32
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0bf      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b61      	ldr	r3, [pc, #388]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d911      	bls.n	8002672 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b5e      	ldr	r3, [pc, #376]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	4393      	bics	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	4b5b      	ldr	r3, [pc, #364]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0a6      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	d015      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2204      	movs	r2, #4
 8002682:	4013      	ands	r3, r2
 8002684:	d006      	beq.n	8002694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002686:	4b51      	ldr	r3, [pc, #324]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 800268c:	21e0      	movs	r1, #224	@ 0xe0
 800268e:	00c9      	lsls	r1, r1, #3
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b4d      	ldr	r3, [pc, #308]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	22f0      	movs	r2, #240	@ 0xf0
 800269a:	4393      	bics	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	4b4a      	ldr	r3, [pc, #296]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	d04c      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	4013      	ands	r3, r2
 80026c4:	d120      	bne.n	8002708 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07a      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b3e      	ldr	r3, [pc, #248]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	049b      	lsls	r3, r3, #18
 80026da:	4013      	ands	r3, r2
 80026dc:	d114      	bne.n	8002708 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06e      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 80026ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	4013      	ands	r3, r2
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e062      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e05b      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002708:	4b30      	ldr	r3, [pc, #192]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	4393      	bics	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe fbb2 	bl	8000e84 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002724:	e009      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002726:	f7fe fbad 	bl	8000e84 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <HAL_RCC_ClockConfig+0x1a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e042      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	220c      	movs	r2, #12
 8002740:	401a      	ands	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1ec      	bne.n	8002726 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d211      	bcs.n	800277e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	4393      	bics	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_RCC_ClockConfig+0x19c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e020      	b.n	80027c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2204      	movs	r2, #4
 8002784:	4013      	ands	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <HAL_RCC_ClockConfig+0x1a8>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800279c:	f000 f820 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 80027a0:	0001      	movs	r1, r0
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <HAL_RCC_ClockConfig+0x1a0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	220f      	movs	r2, #15
 80027aa:	4013      	ands	r3, r2
 80027ac:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <HAL_RCC_ClockConfig+0x1ac>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	000a      	movs	r2, r1
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_ClockConfig+0x1b0>)
 80027b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fb1d 	bl	8000df8 <HAL_InitTick>
  
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	00001388 	.word	0x00001388
 80027d4:	fffff8ff 	.word	0xfffff8ff
 80027d8:	08002e80 	.word	0x08002e80
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027fa:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	220c      	movs	r2, #12
 8002804:	4013      	ands	r3, r2
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d046      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0xb8>
 800280a:	d848      	bhi.n	800289e <HAL_RCC_GetSysClockFreq+0xbe>
 800280c:	2b04      	cmp	r3, #4
 800280e:	d002      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x36>
 8002810:	2b08      	cmp	r3, #8
 8002812:	d003      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x3c>
 8002814:	e043      	b.n	800289e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002816:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002818:	613b      	str	r3, [r7, #16]
      break;
 800281a:	e043      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0c9b      	lsrs	r3, r3, #18
 8002820:	220f      	movs	r2, #15
 8002822:	4013      	ands	r3, r2
 8002824:	4a24      	ldr	r2, [pc, #144]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800282a:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800282c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282e:	220f      	movs	r2, #15
 8002830:	4013      	ands	r3, r2
 8002832:	4a22      	ldr	r2, [pc, #136]	@ (80028bc <HAL_RCC_GetSysClockFreq+0xdc>)
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	23c0      	movs	r3, #192	@ 0xc0
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	401a      	ands	r2, r3
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	429a      	cmp	r2, r3
 8002846:	d109      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	481a      	ldr	r0, [pc, #104]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800284c:	f7fd fc5c 	bl	8000108 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	001a      	movs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4353      	muls	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e01a      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	23c0      	movs	r3, #192	@ 0xc0
 8002860:	025b      	lsls	r3, r3, #9
 8002862:	401a      	ands	r2, r3
 8002864:	23c0      	movs	r3, #192	@ 0xc0
 8002866:	025b      	lsls	r3, r3, #9
 8002868:	429a      	cmp	r2, r3
 800286a:	d109      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	4814      	ldr	r0, [pc, #80]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002870:	f7fd fc4a 	bl	8000108 <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	001a      	movs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4353      	muls	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e008      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	480c      	ldr	r0, [pc, #48]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002884:	f7fd fc40 	bl	8000108 <__udivsi3>
 8002888:	0003      	movs	r3, r0
 800288a:	001a      	movs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4353      	muls	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	613b      	str	r3, [r7, #16]
      break;
 8002896:	e005      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	e002      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028a0:	613b      	str	r3, [r7, #16]
      break;
 80028a2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028a4:	693b      	ldr	r3, [r7, #16]
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b006      	add	sp, #24
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	40021000 	.word	0x40021000
 80028b4:	007a1200 	.word	0x007a1200
 80028b8:	08002e90 	.word	0x08002e90
 80028bc:	08002ea0 	.word	0x08002ea0
 80028c0:	02dc6c00 	.word	0x02dc6c00

080028c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80028e0:	e08e      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2017      	movs	r0, #23
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	055b      	lsls	r3, r3, #21
 80028f2:	4013      	ands	r3, r2
 80028f4:	d110      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0549      	lsls	r1, r1, #21
 8002900:	430a      	orrs	r2, r1
 8002902:	61da      	str	r2, [r3, #28]
 8002904:	4b67      	ldr	r3, [pc, #412]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	055b      	lsls	r3, r3, #21
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	183b      	adds	r3, r7, r0
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4013      	ands	r3, r2
 8002922:	d11a      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002924:	4b60      	ldr	r3, [pc, #384]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800292a:	2180      	movs	r1, #128	@ 0x80
 800292c:	0049      	lsls	r1, r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe faa7 	bl	8000e84 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	e008      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe faa2 	bl	8000e84 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0a6      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b56      	ldr	r3, [pc, #344]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4013      	ands	r3, r2
 8002958:	d0f0      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800295a:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	23c0      	movs	r3, #192	@ 0xc0
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d034      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	23c0      	movs	r3, #192	@ 0xc0
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4013      	ands	r3, r2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d02c      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297c:	4b49      	ldr	r3, [pc, #292]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a4a      	ldr	r2, [pc, #296]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002988:	6a1a      	ldr	r2, [r3, #32]
 800298a:	4b46      	ldr	r3, [pc, #280]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800298c:	2180      	movs	r1, #128	@ 0x80
 800298e:	0249      	lsls	r1, r1, #9
 8002990:	430a      	orrs	r2, r1
 8002992:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002994:	4b43      	ldr	r3, [pc, #268]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	4b42      	ldr	r3, [pc, #264]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800299a:	4945      	ldr	r1, [pc, #276]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800299c:	400a      	ands	r2, r1
 800299e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a0:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fa69 	bl	8000e84 <HAL_GetTick>
 80029b2:	0003      	movs	r3, r0
 80029b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e009      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fa64 	bl	8000e84 <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e067      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029cc:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d6:	4b33      	ldr	r3, [pc, #204]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e6:	430a      	orrs	r2, r1
 80029e8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ea:	2317      	movs	r3, #23
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fa:	492f      	ldr	r1, [pc, #188]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2201      	movs	r2, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0a:	4b26      	ldr	r3, [pc, #152]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	2203      	movs	r2, #3
 8002a10:	4393      	bics	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2202      	movs	r2, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a28:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2220      	movs	r2, #32
 8002a42:	4013      	ands	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a46:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	4013      	ands	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a66:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	2240      	movs	r2, #64	@ 0x40
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b006      	add	sp, #24
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	fffffcff 	.word	0xfffffcff
 8002ab0:	fffeffff 	.word	0xfffeffff
 8002ab4:	00001388 	.word	0x00001388
 8002ab8:	efffffff 	.word	0xefffffff
 8002abc:	fffcffff 	.word	0xfffcffff

08002ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0a8      	b.n	8002c24 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2382      	movs	r3, #130	@ 0x82
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d009      	beq.n	8002afa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	61da      	str	r2, [r3, #28]
 8002aec:	e005      	b.n	8002afa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	225d      	movs	r2, #93	@ 0x5d
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	225c      	movs	r2, #92	@ 0x5c
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fd fff8 	bl	8000b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	225d      	movs	r2, #93	@ 0x5d
 8002b20:	2102      	movs	r1, #2
 8002b22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2140      	movs	r1, #64	@ 0x40
 8002b30:	438a      	bics	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	23e0      	movs	r3, #224	@ 0xe0
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d902      	bls.n	8002b46 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e002      	b.n	8002b4c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	23f0      	movs	r3, #240	@ 0xf0
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d008      	beq.n	8002b6a <HAL_SPI_Init+0xaa>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	23e0      	movs	r3, #224	@ 0xe0
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d002      	beq.n	8002b6a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2382      	movs	r3, #130	@ 0x82
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	401a      	ands	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6899      	ldr	r1, [r3, #8]
 8002b78:	2384      	movs	r3, #132	@ 0x84
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2102      	movs	r1, #2
 8002b86:	400b      	ands	r3, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	400b      	ands	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6999      	ldr	r1, [r3, #24]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2138      	movs	r1, #56	@ 0x38
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	2180      	movs	r1, #128	@ 0x80
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	0011      	movs	r1, r2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	2204      	movs	r2, #4
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	400b      	ands	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	2108      	movs	r1, #8
 8002be2:	400b      	ands	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	23f0      	movs	r3, #240	@ 0xf0
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	400b      	ands	r3, r1
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	015b      	lsls	r3, r3, #5
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4907      	ldr	r1, [pc, #28]	@ (8002c2c <HAL_SPI_Init+0x16c>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	225d      	movs	r2, #93	@ 0x5d
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fffff7ff 	.word	0xfffff7ff

08002c30 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e074      	b.n	8002d2c <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223c      	movs	r2, #60	@ 0x3c
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223d      	movs	r2, #61	@ 0x3d
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7fd ffa5 	bl	8000ba8 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	223c      	movs	r2, #60	@ 0x3c
 8002c62:	2102      	movs	r1, #2
 8002c64:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002c7c:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002c84:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002c8a:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002c90:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002c96:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8002c9c:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8002ca2:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7b1b      	ldrb	r3, [r3, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d108      	bne.n	8002cc6 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	0249      	lsls	r1, r1, #9
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	43d2      	mvns	r2, r2
 8002cdc:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cf6:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	0010      	movs	r0, r2
 8002d02:	f000 f817 	bl	8002d34 <TSC_extract_groups>
 8002d06:	0003      	movs	r3, r0
 8002d08:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2103      	movs	r1, #3
 8002d16:	438a      	bics	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	223c      	movs	r2, #60	@ 0x3c
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b003      	add	sp, #12
 8002d32:	bd90      	pop	{r4, r7, pc}

08002d34 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	e011      	b.n	8002d6a <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4013      	ands	r3, r2
 8002d54:	d006      	beq.n	8002d64 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002d56:	2201      	movs	r2, #1
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	0013      	movs	r3, r2
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	3301      	adds	r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b07      	cmp	r3, #7
 8002d6e:	d9ea      	bls.n	8002d46 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002d70:	68fb      	ldr	r3, [r7, #12]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <USB_DisableGlobalInt+0x30>)
 8002d86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2240      	movs	r2, #64	@ 0x40
 8002d8c:	5a9b      	ldrh	r3, [r3, r2]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	b292      	uxth	r2, r2
 8002d94:	43d2      	mvns	r2, r2
 8002d96:	b292      	uxth	r2, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2240      	movs	r2, #64	@ 0x40
 8002da0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	0000bf80 	.word	0x0000bf80

08002db0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002db0:	b084      	sub	sp, #16
 8002db2:	b590      	push	{r4, r7, lr}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	2004      	movs	r0, #4
 8002dbc:	2410      	movs	r4, #16
 8002dbe:	1900      	adds	r0, r0, r4
 8002dc0:	2408      	movs	r4, #8
 8002dc2:	46a4      	mov	ip, r4
 8002dc4:	44bc      	add	ip, r7
 8002dc6:	4460      	add	r0, ip
 8002dc8:	6001      	str	r1, [r0, #0]
 8002dca:	6042      	str	r2, [r0, #4]
 8002dcc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2244      	movs	r2, #68	@ 0x44
 8002de2:	2100      	movs	r1, #0
 8002de4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2250      	movs	r2, #80	@ 0x50
 8002dea:	2100      	movs	r1, #0
 8002dec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b003      	add	sp, #12
 8002df6:	bc90      	pop	{r4, r7}
 8002df8:	bc08      	pop	{r3}
 8002dfa:	b004      	add	sp, #16
 8002dfc:	4718      	bx	r3

08002dfe <memset>:
 8002dfe:	0003      	movs	r3, r0
 8002e00:	1882      	adds	r2, r0, r2
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d100      	bne.n	8002e08 <memset+0xa>
 8002e06:	4770      	bx	lr
 8002e08:	7019      	strb	r1, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	e7f9      	b.n	8002e02 <memset+0x4>
	...

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2600      	movs	r6, #0
 8002e14:	4c0c      	ldr	r4, [pc, #48]	@ (8002e48 <__libc_init_array+0x38>)
 8002e16:	4d0d      	ldr	r5, [pc, #52]	@ (8002e4c <__libc_init_array+0x3c>)
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	42a6      	cmp	r6, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	2600      	movs	r6, #0
 8002e22:	f000 f819 	bl	8002e58 <_init>
 8002e26:	4c0a      	ldr	r4, [pc, #40]	@ (8002e50 <__libc_init_array+0x40>)
 8002e28:	4d0a      	ldr	r5, [pc, #40]	@ (8002e54 <__libc_init_array+0x44>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	42a6      	cmp	r6, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	00b3      	lsls	r3, r6, #2
 8002e36:	58eb      	ldr	r3, [r5, r3]
 8002e38:	4798      	blx	r3
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	00b3      	lsls	r3, r6, #2
 8002e40:	58eb      	ldr	r3, [r5, r3]
 8002e42:	4798      	blx	r3
 8002e44:	3601      	adds	r6, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002eb0 	.word	0x08002eb0
 8002e4c:	08002eb0 	.word	0x08002eb0
 8002e50:	08002eb8 	.word	0x08002eb8
 8002e54:	08002eb0 	.word	0x08002eb0

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr
